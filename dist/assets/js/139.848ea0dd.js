(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{605:function(e,t,n){"use strict";n.r(t);var s=n(28),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"webpack打包插件篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack打包插件篇"}},[e._v("#")]),e._v(" webpack打包插件篇")]),e._v(" "),n("p",[e._v("webpack 中的插件用于代码资源的打包优化，混合，压缩，treeShaking，去掉注释等等...")]),e._v(" "),n("p",[n("strong",[e._v("学习目标：")]),e._v(" 提供代码的利用率(coverage)，提高页面访问速度。")]),e._v(" "),n("p",[e._v("ctrl + shift + i 使用chrome自带的代码覆盖率检查工具")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://blog.csdn.net/Aero_K/article/details/82492634",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/Aero_K/article/details/82492634"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"splitchunksplugin代码分割"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#splitchunksplugin代码分割"}},[e._v("#")]),e._v(" SplitChunksPlugin代码分割")]),e._v(" "),n("p",[e._v("代码分割的作用就是减小入口文件的体积，将其分割为多个代码块资源，减少加载时间。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("optimization: {\n    splitChunks: {\n      chunks: \"all\", \n      // 同步异步都会进行代码分割（默认只对异步代码进行分割,webpack认为只有异步组件才能提升性能）\n      // 同步代码只是对缓存做了优化处理，分割入口主文件为多个小文件，修改的时候只会更新被修改的文件\n      minSize: 30000, // 做代码分割的最小字节，小于这个就不分割\n      maxSize: 50000,  \n      minChunks: 1, // 当一个模块被打包之后的chunk引用次数至少多少次，才分割\n      maxAsyncRequests: 5, \n      maxInitialRequests: 3, // 入口处的代码分割数\n      automaticNameDelimiter: '~', // 文件生成的连接符\n      name: true,\n      cacheGroups: {\n        vendors: {\n          test: /[\\\\/]node_modules[\\\\/]/, // 如果是从node_module中安装的，就打包在vendors中\n          priority: -10,  // 优先级，-10 > -20 ,如果缓存组条件有多个满足的时，按优先级来划分打包组\n          filename: 'vendors.js'\n        },\n        default: { // 默认匹配规则，\n          // minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true,  \n          // 如果一个包之前被打包过，则不会重复打包 \n          // （例如a模块中引入了b, b之前被c引用并且打包过,则a会重复使用之前的打包的b）\n          filename: 'common.js'\n        } \n      }\n    }\n  },\n")])])]),n("p",[n("a",{attrs:{href:"https://www.webpackjs.com/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.webpackjs.com/plugins/split-chunks-plugin/"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"懒加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[e._v("#")]),e._v(" 懒加载")]),e._v(" "),n("p",[e._v("按需加载，分割代码。")]),e._v(" "),n("p",[e._v("懒加载：")]),e._v(" "),n("p",[e._v("demo01")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  getComponent = async () => {\n    const _ = await import(/* webpackChunkName:\"lodash\" */'lodash');\n    let element = document.createElement('div');\n    element.innerHTML = _.join(['Dell', 'Lee'], '-');\n    document.body.appendChild(element);\n  };\n")])])]),n("p",[e._v("demo02")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// utils/index.js\nexport async function createElement () {\n  const element = document.createElement('div');\n  const  _  = await import(/* webpackChunkName: \"lodash\" */ 'lodash');\n  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n  return element;\n};\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" // ...\n getComponent2 = async () => {\n    const module = await import(/* webpackChunkName:\"createElement\" */ '@/utils/index');\n    module.createElement().then((component:any) => {\n      document.body.appendChild(component);\n    });\n  };\n")])])]),n("p",[n("a",{attrs:{href:"https://webpack.js.org/guides/lazy-loading/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://webpack.js.org/guides/lazy-loading/"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"预加载prefetching-preloading"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预加载prefetching-preloading"}},[e._v("#")]),e._v(" 预加载prefetching，preloading")]),e._v(" "),n("p",[e._v("在需要搜首次展示的资源加载完之后，浏览器处理空闲的时候，我们可以充分利用网络资源，进行预加载。")]),e._v(" "),n("p",[e._v("**例如：**在首页有个登录弹框，只有在用户点击之后才需要加载对应的资源，这个时候如果我们将这个弹窗资源用懒加载的方式，则用户体验不是很好；如果写成同步的随首页资源一起加载下来则会影响首页加载速度。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" import(/* webpackPrefetch: true */'lodash').then(res  => {\n   console.log(_.join([1,2,4,5], \"ABCD\"))\n })\n")])])]),n("p",[n("a",{attrs:{href:"https://webpack.js.org/guides/code-splitting/#prefetchingpreloading-modules",target:"_blank",rel:"noopener noreferrer"}},[e._v("实现方式"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://evalgithub.github.io/webpack/%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5%E4%BB%A5%E5%8F%8A%E9%A2%84%E5%8A%A0%E8%BD%BD.html#import%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5%EF%BC%88%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2%EF%BC%89",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack动态导入及预加载"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"css代码分割-minicssextractplugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css代码分割-minicssextractplugin"}},[e._v("#")]),e._v(" css代码分割 MiniCssExtractPlugin")]),e._v(" "),n("p",[e._v("这个不支持热更新，所以一般用于生产环境，不用于开发环境，（开发使用style-loader）")]),e._v(" "),n("h2",{attrs:{id:"css压缩-optimize-css-assets-webpack-plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css压缩-optimize-css-assets-webpack-plugin"}},[e._v("#")]),e._v(" css压缩[optimize-css-assets-webpack-plugin]")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("new OptimizeCssAssetsPlugin({\n  assetNameRegExp: /\\.css$/g,\n  cssProcessor: require('cssnano'),\n  cssProcessorOptions: {\n    safe: true,\n    discardComments: {\n      removeAll: true\n    }\n  },\n  canPrint: true\n}),\n")])])]),n("h2",{attrs:{id:"tree-shaking"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"https://webpack.docschina.org/guides/tree-shaking/",target:"_blank",rel:"noopener noreferrer"}},[e._v("tree shaking"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("打包时候去除冗余代码，去除第三方模块中没被使用到的代码")]),e._v(" "),n("p",[e._v("依赖于ES2015的静态特性（import，export可做静态分析）")]),e._v(" "),n("ul",[n("li",[e._v("必须满足\n"),n("ul",[n("li",[e._v("使用es2015模块语法")]),e._v(" "),n("li",[e._v("确保没有编辑器将你的ES2015模块语法转为CommonJS(将其设置为false)")]),e._v(" "),n("li",[e._v('在项目的 package.json 文件中，添加 "sideEffects" 属性')]),e._v(" "),n("li",[e._v('使用 mode 为 "production" 的配置项以启用更多优化项，包括压缩代码与 tree shaking')])])])]),e._v(" "),n("p",[e._v("package.json")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('sideEffect: false \n// or\n"sideEffects": [\n  "**/*.css",\n  "**/*.scss",\n  "./esnext/index.js",\n  "./esnext/configure.js"\n],\n')])])]),n("p",[e._v("如果设置为false标明所用的模块都会被treeShaking，可以使用数组\n形式指定不被treeShaking的文件")])])}),[],!1,null,null,null);t.default=a.exports}}]);