(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{447:function(t,a,e){t.exports=e.p+"assets/img/angular_commit.65d1a776.png"},448:function(t,a,e){t.exports=e.p+"assets/img/commit_error.e58d879c.png"},449:function(t,a,e){t.exports=e.p+"assets/img/pre-commit.d7ca73cc.png"},450:function(t,a,e){t.exports=e.p+"assets/img/commit_lint.ce7050af.png"},558:function(t,a,e){"use strict";e.r(a);var s=e(28),i=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git提交规范制定-落地"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git提交规范制定-落地"}},[t._v("#")]),t._v(" git提交规范制定&落地")]),t._v(" "),s("blockquote",[s("p",[t._v("约定git提交信息规范，在出现问题的时候，能够利用提交信息迅速（定位｜过滤出）目标代码，加快问题修复速度。")])]),t._v(" "),s("h2",{attrs:{id:"规范格式简述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规范格式简述"}},[t._v("#")]),t._v(" 规范格式简述：")]),t._v(" "),s("p",[t._v("一般的message格式包括header，body和footer，header中包括了type，scope和subject")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<type>(<scope>): <subject>\n <BLANK LINE> <body> \n<BLANK LINE> <footer>\n")])])]),s("h3",{attrs:{id:"header"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[t._v("#")]),t._v(" header")]),t._v(" "),s("p",[s("strong",[t._v("type一般就是描述提交的改动类型")])]),t._v(" "),s("ul",[s("li",[t._v("feat：新增功能")]),t._v(" "),s("li",[t._v("fix：修复bug")]),t._v(" "),s("li",[t._v("docs：修改文档")]),t._v(" "),s("li",[t._v("style：对代码的格式化进行改动，代码的逻辑没有发生变化")]),t._v(" "),s("li",[t._v("test：新增或者修改测试用例")]),t._v(" "),s("li",[t._v("refactor：重构代码，或者其他的优化举措")]),t._v(" "),s("li",[t._v("chore：项目工程方面的改动，代码的逻辑并未发生任何变化")]),t._v(" "),s("li",[t._v("evert：恢复之前的提交")]),t._v(" "),s("li",[t._v("perf：提升页面性能")]),t._v(" "),s("li",[t._v("deps：升级依赖")])]),t._v(" "),s("p",[s("strong",[t._v("scope一般是用来描述本次提交涉及到的改动范围，具体取值根据项目定")])]),t._v(" "),s("p",[s("strong",[t._v("subject就是用来概括和描述本次提交的改动内容")])]),t._v(" "),s("blockquote",[s("p",[t._v("git commit -m "),s("type",[t._v("[optional scope]: "),s("subject")],1)],1)]),t._v(" "),s("p",[t._v("比如新增了一个按钮可以在提交时写")]),t._v(" "),s("blockquote",[s("p",[t._v('git commit -m "feat:add a button"')])]),t._v(" "),s("blockquote",[s("p",[t._v('git commit -m "feat:添加一个按钮"')])]),t._v(" "),s("p",[t._v("如果修复了一个bug可以是")]),t._v(" "),s("blockquote",[s("p",[t._v('git commit -m "fix:modify a bug"')])]),t._v(" "),s("blockquote",[s("p",[t._v('git commit -m "fix:修改了一个xxbug"')])]),t._v(" "),s("h3",{attrs:{id:"body"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#body"}},[t._v("#")]),t._v(" body")]),t._v(" "),s("p",[t._v("主要是用来描述详细的提交内容，可写可不写")]),t._v(" "),s("h3",{attrs:{id:"footer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#footer"}},[t._v("#")]),t._v(" footer")]),t._v(" "),s("p",[t._v("用于代码评审过程记录作者签名等等，可写可不写")]),t._v(" "),s("p",[t._v("ie: angular提交规范")]),t._v(" "),s("p",[s("img",{attrs:{src:e(447),alt:"avatar"}})]),t._v(" "),s("h2",{attrs:{id:"规范约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规范约束"}},[t._v("#")]),t._v(" 规范约束")]),t._v(" "),s("p",[t._v("需要自己在项目中配置")]),t._v(" "),s("blockquote",[s("p",[t._v("commitlint：定义提交信息规则")])]),t._v(" "),s("blockquote",[s("p",[t._v("husky：git 钩子函数使用")])]),t._v(" "),s("h3",{attrs:{id:"配置-commitlint-husky"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置-commitlint-husky"}},[t._v("#")]),t._v(" 配置：commitlint，husky")]),t._v(" "),s("p",[t._v("参考文档：https://commitlint.js.org/#/guides-local-setup")]),t._v(" "),s("ol",[s("li",[t._v("安装commitlint")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm install --save-dev @commitlint/{cli,config-conventional}\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("生成commitlint.config文件")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo \"module.exports = { extends: ['@commitlint/config-conventional'] };\" > commitlint.config.js\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("安装husky")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("tnpm install husky --save-dev\n\nnpx husky install\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("配置commitlint.config.js")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = { extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [2, 'always', [\n      'feat', // 新功能\n      'update', // 更新\n      'fix', // 修复bug\n      'refactor', // 重构\n      'perf', // 优化\n      'style', // 样式\n      'docs', //  文档更新\n      'test', // 测试 \n      'deps', // 依赖升级\n      'chore' // 构建过程或者辅助工具的变动\n    ]],\n    'header-case': [2, 'always', 'lower-case'],\n    'scope-case': [2, 'always', 'lower-case'],\n    'type-case': [2, 'always', 'lower-case'],\n    'type-empty': [2, 'never'],\n    'subject-empty': [2, 'never'],\n    'subject-case': [2, 'always', 'lower-case'],\n    'header-max-length': [2, 'always', 40]\n  }\n};\n")])])]),s("h3",{attrs:{id:"commit之前校验代码规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit之前校验代码规范"}},[t._v("#")]),t._v(" commit之前校验代码规范")]),t._v(" "),s("ul",[s("li",[t._v("添加一个commit-msg钩子函数")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npx husky add .husky/commit-msg 'npx --no-install commitlint --edit $1'\n")])])]),s("ul",[s("li",[t._v("添加pre-commit钩子函数")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('npx husky add .husky/pre-commit "npm run lint"\n')])])]),s("p",[t._v("会发现钩子函数多了一个")]),t._v(" "),s("p",[s("img",{attrs:{src:e(448),alt:"avatar"}})]),t._v(" "),s("p",[t._v('提交代码（提交之后eslint提醒报错） git commit -a -m "feat: ***"')]),t._v(" "),s("p",[s("img",{attrs:{src:e(449),alt:"avatar"}})]),t._v(" "),s("h3",{attrs:{id:"git的钩子函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git的钩子函数"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("git的钩子函数"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("问题一：上面的配置是全局的，对于老项目如果之前代码没有开启，eslint 现在提交，会导致eslint提醒报错？？？？能否做到只争对当前修改的文件进行eslint校验？？")]),t._v(" "),s("p",[t._v('lint-staged 只对修改暂存的文件进行eslint校验；另外如果安装了“Prettier-Code formatter"插件，保存之后会自动修正代码格式（如果配置了eslint规则）')]),t._v(" "),s("ul",[s("li",[t._v("lint-staged 使用方式：")])]),t._v(" "),s("blockquote",[s("p",[t._v("npx mrm@2 lint-staged")])]),t._v(" "),s("ol",[s("li",[t._v("pre-commit钩子配置修改")])]),t._v(" "),s("p",[s("img",{attrs:{src:e(450),alt:"avatar"}})]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("package.json修改")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"lint-staged": {\n  "*.{js,jsx}": ["eslint --cache --fix"],\n  "*.css": "stylelint --fix"\n}\n')])])]),s("p",[t._v("env：expected node@>=12")])])}),[],!1,null,null,null);a.default=i.exports}}]);