(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{463:function(e,t,n){e.exports=n.p+"assets/img/vue-parse-content.0f64bdc2.png"},610:function(e,t,n){"use strict";n.r(t);var r=n(28),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"一个简易版的vite"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一个简易版的vite"}},[e._v("#")]),e._v(" 一个简易版的vite")]),e._v(" "),r("p",[r("strong",[e._v("实现功能")])]),e._v(" "),r("ul",[r("li",[e._v("能够解析js")]),e._v(" "),r("li",[e._v("能够解析vue")]),e._v(" "),r("li",[e._v("能够介解析html")])]),e._v(" "),r("p",[e._v('type="module"时候，使用import引入文件，会发送一个请求，因此我们需要启动一个服务器用于拦截文件请求')]),e._v(" "),r("h2",{attrs:{id:"使用一个koa启动server-根据文件路径判断"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用一个koa启动server-根据文件路径判断"}},[e._v("#")]),e._v(" 使用一个koa启动server, 根据文件路径判断")]),e._v(" "),r("ul",[r("li",[e._v("首页路径直接返回文件内容")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const Koa = require('koa');\nconst app = new Koa();\n\napp.use(async ctx => {\n    const {url ,query} = ctx.request;\n    if (url === '/') { // 如果是‘/’, 直接返回内容\n        ctx.type = 'text/html';\n        ctx.body = mock(fs.readFileSync('./index.html', 'utf8'))\n    } else if (url.endsWith('.js')) {\n        // 相应js请求\n        const p = path.join(__dirname, url); // 绝对地址\n        ctx.type = 'text/javascript';\n        ctx.body = rewriteImport(fs.readFileSync(p, 'utf8'));\n    }\n});\n\n// mock 一些不存在的变量\nfunction mock(content) {\n   return content.replace('<script type=\"module\" src=\"/src/main.js\"><\/script>', `\n    <script>\n        window.process={env: {NODE_ENV: 'dev'}}\n    <\/script>\n    <script type=\"module\" src=\"/src/main.js\"><\/script>\n    `);\n};\n\napp.listen(3004, () => {\n    console.log('localhost: 3004 is success');\n});\n")])])]),r("h2",{attrs:{id:"对于相对模块可以直接读取文件内容返回-对于第三方模块需要做特殊处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对于相对模块可以直接读取文件内容返回-对于第三方模块需要做特殊处理"}},[e._v("#")]),e._v(" 对于相对模块可以直接读取文件内容返回，对于第三方模块需要做特殊处理")]),e._v(" "),r("ul",[r("li",[e._v("处理方式：需要读取node_module中安装的对应模块，返回文件内容")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 重写导入，变成相对地址\nfunction rewriteImport(content) {\n    return content.replace(/ from ['\"](.*)['\"]/g, ($0, $1) => { // ./ 、../、这种方式存在的相对模块\n        // $0 匹配字符串，$1相对内容\n        if ($1.startsWith('.') || $1.startsWith('/') || $1.startsWith('../')) {\n            // 原封不动\n            return $0;\n        } else {\n            return ` from '/@modules/${$1}'`; // 对于第三方模块需要做特殊处理，添加一个@modules做标记\n        }\n    });\n}\n")])])]),r("ul",[r("li",[e._v("如果请求的是第三方模块，需要读取node_module中对应的模块")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("else if (url.startsWith('/@modules/')) {\n    const moduleName = url.replace('/@modules/', ''); // 获取@modules后面部分，模块名称\n    const prefix = path.join(__dirname, '../node_modules', moduleName); // node_module中模块文件地址\n    // 要加载文件的地址\n    const module = require(prefix + '/package.json').module; // package.json中的module字段既是需要的文件内容\n    const filePath = path.join(prefix, module);\n    const res = fs.readFileSync(filePath, 'utf8');\n    ctx.type = 'text/javascript';\n    ctx.body = rewriteImport(res);\n} \n")])])]),r("h2",{attrs:{id:"对于vue文件的处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对于vue文件的处理"}},[e._v("#")]),e._v(" 对于vue文件的处理")]),e._v(" "),r("blockquote",[r("p",[e._v("需要使用vue官方提供的解析包对vue文件进行解析, 将vue文件的内容分开处理（script, template）")])]),e._v(" "),r("ul",[r("li",[e._v("使用 "),r("strong",[e._v("@vue/compiler-sfc")]),e._v(" 解析vue组件")])]),e._v(" "),r("p",[r("img",{attrs:{src:n(463),alt:"avatar"}})]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("else if (url.indexOf('.vue') > -1) {\n    // 获取纯粹的文件路径\n    const p = path.join(__dirname, url.split('?')[0]); \n    // compilerSfc解析SRC内部的script\n    const ret = compilerSfc.parse(fs.readFileSync(p, 'utf8'));\n    // 没有query.type -> sfc\n    if (!query.type) {\n        // 获取脚本内容\n        const scriptContent = ret.descriptor.script.content;\n        // 转换默认导出配置对象为变量\n        const script = scriptContent.replace('export default ', 'const __script =')\n        ctx.type = 'text/javascript';\n        ctx.body = `${rewriteImport(script)}\n            // template解析变成另外一个请求单独做\n            import {render as __render} from '${url}?type=template'\n            __script.render = __render;\n            export default __script\n        `;\n    } else if (query.type === 'template'){\n        const tpl = ret.descriptor.template.content;\n        // 编译为render\n        const render = compilerDom.compile(tpl, {mode: 'module'}).code;\n        ctx.type = 'text/javascript';\n        ctx.body = rewriteImport(render);\n    }\n}\n")])])]),r("h2",{attrs:{id:"完整源码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#完整源码"}},[e._v("#")]),e._v(" 完整源码")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 写一个node服务器，相当于devServer\nconst Koa = require('koa');\nconst app = new Koa();\nconst fs = require('fs');\nconst path = require('path');\nconst compilerSfc = require('@vue/compiler-sfc');\nconst compilerDom = require('@vue/compiler-dom');\n// 返回用户首页\napp.use(async ctx => {\n    const {url, query} = ctx.request;\n    if (url === '/') {\n        // 首页\n        ctx.type = 'text/html';\n        ctx.body = mock(fs.readFileSync('./index.html', 'utf8'));\n    } else if (url.endsWith('.js')) {\n        // 相应js请求\n        const p = path.join(__dirname, url); // 绝对地址\n        ctx.type = 'text/javascript';\n        ctx.body = rewriteImport(fs.readFileSync(p, 'utf8'));\n    } else if (url.startsWith('/@modules/')) {\n        // 获取@modules后面部分，模块名称\n        const moduleName = url.replace('/@modules/', '');\n        const prefix = path.join(__dirname, '../node_modules', moduleName); // node_module中模块文件地址\n        // 要加载文件的地址\n        const module = require(prefix + '/package.json').module;\n        const filePath = path.join(prefix, module);\n        const res = fs.readFileSync(filePath, 'utf8');\n        ctx.type = 'text/javascript';\n        ctx.body = rewriteImport(res);\n    } else if (url.indexOf('.vue') > -1) {\n        // 读取文件内容\n        const p = path.join(__dirname, url.split('?')[0]);\n        // compilerSfc解析SRC内部的script\n        const ret = compilerSfc.parse(fs.readFileSync(p, 'utf8'));\n        // 没有query.type -> sfc\n        if (!query.type) {\n            // 获取脚本内容\n            const scriptContent = ret.descriptor.script.content;\n            // 转换默认导出配置对象为变量\n            const script = scriptContent.replace('export default ', 'const __script =')\n            ctx.type = 'text/javascript';\n            ctx.body = `${rewriteImport(script)}\n                // template解析变成另外一个请求单独做\n                import {render as __render} from '${url}?type=template'\n                __script.render = __render;\n                export default __script\n            `;\n        } else if (query.type === 'template'){\n            const tpl = ret.descriptor.template.content;\n            // 编译为render\n            const render = compilerDom.compile(tpl, {mode: 'module'}).code;\n            ctx.type = 'text/javascript';\n            ctx.body = rewriteImport(render);\n        }\n    } else if (url.endsWith('.png')) {\n        ctx.body = fs.readFileSync('src' + url);\n    }\n})\n\n// 重写导入，变成相对地址\nfunction rewriteImport(content) {\n    return content.replace(/ from ['\"](.*)['\"]/g, ($0, $1) => {\n        // $0 匹配字符串，$1相对内容\n        if ($1.startsWith('.') || $1.startsWith('/') || $1.startsWith('../')) {\n            // 原封不动\n            return $0;\n        } else {\n            return ` from '/@modules/${$1}'`;\n        }\n    });\n}\n\n// mock 一些\nfunction mock(content) {\n   return content.replace('<script type=\"module\" src=\"/src/main.js\"><\/script>', `\n    <script>\n        window.process={env: {NODE_ENV: 'dev'}}\n    <\/script>\n    <script type=\"module\" src=\"/src/main.js\"><\/script>\n    `)\n}\n\napp.listen(3004, () => {\n    console.log('localhost: 3004 is success');\n})\n")])])]),r("p",[e._v("参考："),r("a",{attrs:{href:"https://github.com/EvalGitHub/vite-vue3",target:"_blank",rel:"noopener noreferrer"}},[e._v("self-vite实例"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);