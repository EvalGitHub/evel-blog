(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{570:function(e,n,s){"use strict";s.r(n);var t=s(28),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"axios取消重复请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#axios取消重复请求"}},[e._v("#")]),e._v(" axios取消重复请求")]),e._v(" "),s("p",[e._v("整体思路根据请求方法，参数，地址生成一个请求标示，用对象进行存储，\n每一次请求时，都在axios的请求拦截器中去查找判断是否存在相同的请求")]),e._v(" "),s("p",[e._v("如果存在， 则取消之前的请求；\n如果不存在，则向对象中添加请求信息")]),e._v(" "),s("p",[e._v("每一次请求得到响应之后(无论成功失败)都要在请求响应拦截器中进行请求信息删除")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('const pendingRequest = new Map();\n\nfunction generateReqKey(config) {\n    const { method, url, params, data } = config;\n    return [method, url, Qs.stringify(params), Qs.stringify(data)].join(\n        "&"\n    );\n}\n\nfunction addPendingRequest(config) {\n    const requestKey = generateReqKey(config);\n    config.cancelToken =\n        config.cancelToken ||\n        new axios.CancelToken((cancel) => {\n            if (!pendingRequest.has(requestKey)) {\n                pendingRequest.set(requestKey, cancel);\n            }\n        });\n}\n\nfunction removePendingRequest(config) {\n    const requestKey = generateReqKey(config);\n    if (pendingRequest.has(requestKey)) {\n        \x3c!-- const cancel = pendingRequest.get(requestKey);\n        cancel(requestKey); --\x3e\n        pendingRequest.delete(requestKey);\n    }\n}\n\naxios.interceptors.request.use(\n    function (config) {\n        // 检查是否存在重复请求，若存在则取消已发的请求\n        removePendingRequest(config); \n        // 把当前请求添加到pendingRequest对象中\n        addPendingRequest(config); \n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\naxios.interceptors.response.use(\n    (response) => {\n        // 从pendingRequest对象中移除请求\n        removePendingRequest(response.config); \n        return response;\n    },\n    (error) => {\n        // 从pendingRequest对象中移除请求\n        removePendingRequest(error.config || {}); \n        if (axios.isCancel(error)) {\n            console.log("已取消的重复请求：" + error.message);\n        } else {\n            // 添加异常处理\n        }\n        return Promise.reject(error);\n    }\n);\n\nasync function sendRequest() {\n    console.dir(pendingRequest);\n    const response = await axios.get(\n        "https://jsonplaceholder.typicode.com/todos/1"\n        //   "https://localhost:3000/todos/1"\n    );\n    console.log(response.data);\n}\n')])])]),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s/cjm9BIdKrn0UFAkVtQQiCA",target:"_blank",rel:"noopener noreferrer"}},[e._v("axios取消重复请求"),s("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=r.exports}}]);