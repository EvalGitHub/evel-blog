(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{621:function(t,e,a){"use strict";a.r(e);var r=a(28),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"线程与进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程"}},[t._v("#")]),t._v(" 线程与进程")]),t._v(" "),a("ul",[a("li",[t._v("进程\n操作系统进行资源分配的和调度独立单位，一般包括：程序代码，数据集合，进程控制块\n"),a("ul",[a("li",[t._v("程序代码\n程序用于描述进程要完成的功能")]),t._v(" "),a("li",[t._v("数据集合\n程序在执行时所需要的数据和工作区")]),t._v(" "),a("li",[t._v("进程控制块\n包含进程的描述信息和控制信息是进程存在的唯一标志")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("在早期的操作系统中并没有线程的概念，进程是拥有资源和独立运行的最小单位，也是程序执行的最小单位。\n任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，\n使得各个进程之间内存地址相互隔离。随着计算机的发展，对CPU的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。\n于是就发明了线程，线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元。")])]),t._v(" "),a("p",[a("strong",[t._v("一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)")])]),t._v(" "),a("ul",[a("li",[t._v("线程")])]),t._v(" "),a("p",[t._v("最小的程序执行单位")]),t._v(" "),a("h2",{attrs:{id:"线程与进程的不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程的不同"}},[t._v("#")]),t._v(" 线程与进程的不同")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位")])]),t._v(" "),a("li",[a("p",[t._v("一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线")])]),t._v(" "),a("li",[a("p",[t._v("进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段，数据集，堆等)及一些进程级的资源(如打开文件和信号等)，某进程内的线程在其他进程不可见")])]),t._v(" "),a("li",[a("p",[t._v("调度和切换：线程上下文切换比进程上下文切换要快得多")])])]),t._v(" "),a("h2",{attrs:{id:"为何不使用多进程而是使用多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为何不使用多进程而是使用多线程"}},[t._v("#")]),t._v(" 为何不使用多进程而是使用多线程？")]),t._v(" "),a("p",[t._v("线程廉价，线程启动比较快，退出比较快，对系统资源的冲击也比较小")]),t._v(" "),a("h2",{attrs:{id:"线程-进程之间的资源分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程-进程之间的资源分配"}},[t._v("#")]),t._v(" 线程，进程之间的资源分配")]),t._v(" "),a("p",[t._v("统一由cpu进行分配")]),t._v(" "),a("h2",{attrs:{id:"js为什么是单线程-而其他语言不是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js为什么是单线程-而其他语言不是"}},[t._v("#")]),t._v(" js为什么是单线程，而其他语言不是")]),t._v(" "),a("p",[t._v("js操作与用户视觉密切相关，因为可以操作dom，改变网页展示效果，如果同时存在两个线程对一个元素节点的更改（一个对其进行删除，一个进行更新），会出现很复杂的同步问题。\n即使h5推出的web worker也不能进行dom操作，本质上并没有改变单线程。")]),t._v(" "),a("p",[t._v("单线程意味着，所有的任务都需要排队执行；但是这个时候如果一些任务执行时间比较缓慢，cpu已处于空闲，例如setTimeout/setImterval，promise.then等\n会阻塞程序执行，所以js又提出了异步任务队列，事件轮训的概念。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/weixin_43258908/article/details/89417917?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程和线程的区别和联系"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);