(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{547:function(n,t,e){"use strict";e.r(t);var o=e(28),s=Object(o.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"创建一个全局toast"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建一个全局toast"}},[n._v("#")]),n._v(" 创建一个全局toast")]),n._v(" "),e("ul",[e("li",[n._v("需求")])]),n._v(" "),e("p",[n._v("1、具有函数open并且可以以函数的形式调用传递参数")]),n._v(" "),e("p",[n._v("2、具有函数close，用于关闭销毁弹窗组件")]),n._v(" "),e("p",[n._v("global_toast.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport './global_toast.scss';\n\nfunction textInfo(msg) {\n  return (\n    <div className=\"toast_info_wrapper\">\n      <p className=\"text_des_wrapper\">\n        <span>{msg}</span>\n      </p>\n    </div>\n  )\n};\n\nfunction iconInfo(msg) {\n  return (\n    <div className=\"toast_error_info_wrapper\">\n      <div className='toast_conten'>\n        <img className='err_icon' src={require('@/assets/toast_ico_success 2@2x.png')} />\n        <p className=\"text_des_wrapper\">\n          {msg}\n        </p>\n      </div>\n    </div>\n  )\n};\n\nexport default class Toast extends Component {\n  render() {\n    let { tip, infoType } = this.props;\n    return (\n      <Fragment>\n        {\n          infoType === 'text' ? textInfo(tip) : iconInfo(tip)\n        }\n      </Fragment>\n    );\n  }\n}\n\nToast.propTypes = {\n  tip: PropTypes.string, // err msg\n  infoType: PropTypes.string // toast type  [text, iconText]\n};\n\nToast.newInstance = function newNotificationInstance(properties) {\n  let props = properties || {};\n  let div = document.createElement('div');\n  document.body.appendChild(div);\n  ReactDOM.render(React.createElement(Toast, props), div);\n  return {\n    destroy() {\n      ReactDOM.unmountComponentAtNode(div);\n      document.body.removeChild(div);\n    },\n  };\n};\n")])])]),e("p",[n._v("newNotificationInstance具备两个作用，第一个是可用于在body上创建一个toast节点，并且返回一个销毁函数。")]),n._v(" "),e("p",[n._v("index.js")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import Toast from './global_toast.js';\n\nlet loadingInstance = 0;\nlet getLoadingInstance = (tip, infoType) => {\n    loadingInstance = loadingInstance || Toast.newInstance({\n        tip,\n        infoType\n    });\n    return loadingInstance;\n};\nexport default {\n  open(obj) {\n    let {tip, infoType, selfCloseConfig, callback} = obj;\n    getLoadingInstance(tip, infoType);\n    if (selfCloseConfig && selfCloseConfig.flag) {\n      setTimeout(() => {\n        this.close();\n        if (callback) {\n            callback();\n        };\n      }, selfCloseConfig.timer);\n    }\n  },\n  close() {\n    if (loadingInstance) {\n      loadingInstance.destroy();\n      loadingInstance = null;\n    }\n  },\n};\n")])])]),e("p",[n._v("调用：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import GlobalToast from '@/common/globalToast';\nGlobalToast.open({\n  tip: OrderErrorCode[code].err_msg,\n  infoType: OrderErrorCode[code].err_type,\n  selfCloseConfig: {\n    flag: true,\n    timer: 1000\n  }\n});\n")])])]),e("p",[n._v("css样式参考："),e("a",{attrs:{href:"https://github.com/EvalGitHub/webpack_reactJS/blob/master/src/common/globalToast/global_toast.scss",target:"_blank",rel:"noopener noreferrer"}},[n._v("全局toast的样式文件"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);