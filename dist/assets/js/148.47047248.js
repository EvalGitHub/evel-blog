(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{620:function(t,e,n){"use strict";n.r(e);var r=n(28),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"关于图片优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于图片优化"}},[t._v("#")]),t._v(" 关于图片优化")]),t._v(" "),n("h2",{attrs:{id:"为什么要做图片优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要做图片优化"}},[t._v("#")]),t._v(" "),n("strong",[t._v("为什么要做图片优化？")])]),t._v(" "),n("p",[t._v("因为图片资源是整个网站上比较单纯的又比较容易优化的资源，下面就介绍几种图片资源的优化方式？")]),t._v(" "),n("p",[t._v("优化的目的只是为了加快界面的渲染速度，减少css对页面渲染的阻塞时间。")]),t._v(" "),n("h2",{attrs:{id:"使用css图片精灵-雪碧图-技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用css图片精灵-雪碧图-技巧"}},[t._v("#")]),t._v(" 使用css图片精灵(雪碧图)技巧")]),t._v(" "),n("p",[n("strong",[t._v("原理：")]),t._v(" 将小体积的图片资源（一般是用于背景图）整合成一张比较大的图片资源，然后在css中通过background-position来配合使用")]),t._v(" "),n("p",[n("strong",[t._v("优化方式：")]),t._v(" 减少http请求数，（因为http1.1请求并行下载的数量是有限制的，http1.1是基于文本分割的协议，所以消息是串行的，必须有序地逐个解析，但是http2是基于二进制帧的协议，并且支持多路复用，意味着一个tcp连接可以发送多个请求），因此这个优化技巧是否必须待商榷），另外每一个新的请求必须经历三次握手四次挥手才能建立连接，这是一个比较费时的操作。")]),t._v(" "),n("p",[n("strong",[t._v("使用场景：")]),t._v(" 如果项目中有很多小图标（按钮，logo，指向），这个时候我们很需要使用雪碧图。")]),t._v(" "),n("p",[n("strong",[t._v("弊端")]),t._v("：如果页面只需要部分几张图片或者图片，如果使用雪碧图却需要全量下载，另外文件太大也会影响资源加载速度。")]),t._v(" "),n("p",[t._v("参考链接："),n("a",{attrs:{href:"https://www.jianshu.com/p/50f96ce566e0",target:"_blank",rel:"noopener noreferrer"}},[t._v("雪碧图使用"),n("OutboundLink")],1),t._v("，"),n("a",{attrs:{href:"https://www.cnblogs.com/wangxi01/p/11202201.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于多路复用"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"将图片转化为base64形式-存在css文件中"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#将图片转化为base64形式-存在css文件中"}},[t._v("#")]),t._v(" 将图片转化为base64形式，存在css文件中")]),t._v(" "),n("p",[n("strong",[t._v("原理：")]),t._v(" 随着webpack的流行，对图片比较长做的一种处理形式就是将某一大小范围的图片编译成base64的形式打包进css文件中。")]),t._v(" "),n("p",[n("strong",[t._v("优化方式：")]),t._v(" 减少http请求数量")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")]),t._v(" 小于20kb的图片转义成base64位形式融合到css文件中，大于20kb的会通过file-loader进行不处理复制到assets/文件夹下面。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{\n   test: /\\.(png|svg|jpg|gif)$/,\n   use: [\n       {\n         loader: 'url-loader',\n          // loader: 'happypack/loader?id=url-loader', \n          options: {\n             outputPath: 'assets/',\n             limit: 20024, // 20kb(20*1024)\n             name: '[name].[ext]'\n           }\n        }\n      ]\n}\n")])])]),n("p",[n("strong",[t._v("弊端：")])]),t._v(" "),n("ul",[n("li",[t._v("随着http2.0的普及，已可以实现多个请求并行下载处理，甚至是"),n("strong",[t._v("多路复用")]),t._v(",所以即使图片资源和css相分割，在一定程度上增加了资源请求数量但是也无关紧要")]),t._v(" "),n("li",[t._v("base64和css文件相互融合的形式，会使的图片资源被浏览器缓存的效果降低，本来浏览器可以直接从本地缓存取出的图片，换成base64Url，将造成应用中多个页面重复下载，同时也使得css文件体积变得无法控制（css文件本身就是"),n("strong",[t._v("渲染阻塞资源")]),t._v("，浏览器首次加载时如果没有全部下载和解析完css内容就无法进行渲染树的构建，而base64的嵌入则是雪上加霜，这将把原先浏览器可以进行优化的图片异步加载，变成首屏渲染的阻塞和延迟）")])]),t._v(" "),n("h2",{attrs:{id:"在不改变图片视觉效果的情况下-压缩图片质量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在不改变图片视觉效果的情况下-压缩图片质量"}},[t._v("#")]),t._v(" 在不改变图片视觉效果的情况下，压缩图片质量")]),t._v(" "),n("p",[n("strong",[t._v("原理：")]),t._v(" 设计师给出的图片资源一般而言是比较高清的，但是有时候即使图片的质量不那么高清，也不会影响图片资源展示的视觉效果，这个时候我们可以降低图片资源的质量，来减小资源的体积，加快请求响应速度，有效避免css阻塞。")]),t._v(" "),n("p",[n("strong",[t._v("优化方式：")]),t._v(" 减少图片资源的体积，提升请求速度")]),t._v(" "),n("p",[n("strong",[t._v("实现方式一：")]),t._v(" 使用 "),n("a",{attrs:{href:"https://www.npmjs.com/package/imagemin-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("imagemin-webpack-plugin"),n("OutboundLink")],1),t._v(", "),n("a",{attrs:{href:"https://www.npmjs.com/package/imagemin-mozjpeg",target:"_blank",rel:"noopener noreferrer"}},[t._v("imagemin-mozjpeg"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" new ImageminPlugin({\n    plugins: [\n      imageminMozjpeg({\n        quality: 70,\n        progressive: true\n      })\n    ]\n  })\n")])])]),n("p",[n("strong",[t._v("其他实现方式：")]),t._v(" 使用工具将图片体积进行压缩")]),t._v(" "),n("ol",[n("li",[t._v("在线工具：")])]),t._v(" "),n("p",[n("a",{attrs:{href:"https://tinypng.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("TinyPNG"),n("OutboundLink")],1),t._v("：免费，TinyPng  使用智能有损压缩技术减小 PNG 文件的文件大小，原理是将图片中相似的颜色组合起来（量化），通过减少颜色的数量，可以将 24 位 PNG 文件转为更小的 8 位索引图片，同时所有不必要的元数据被剥离。")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://ppduck.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PP鸭"),n("OutboundLink")],1),t._v("：很好用，根据图片的特点，选择比较兼顾大小和质量的压缩方案。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://zhitu.isux.us/",target:"_blank",rel:"noopener noreferrer"}},[t._v("智图"),n("OutboundLink")],1),t._v("：免费，可以选择压缩质量，生成 Webp。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.iloveimg.com/zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Iloveimg"),n("OutboundLink")],1),t._v("：免费，支持压缩 JPG，PNG， GIF， 能保持最佳文件质量和压缩程度, 并且 Iloveimg 不仅仅是一款图片压缩工具，还支持图片的裁剪、图片的格式转换以及大小调整等功能。")]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("客户端工具：")])]),t._v(" "),n("p",[t._v("PhotoShop：只适用 JPG，导出时选择 JPG，选择压缩质量。")]),t._v(" "),n("p",[t._v("Sketch：只适用 JPG，导出时选择 JPG，选择压缩质量。")]),t._v(" "),n("h2",{attrs:{id:"响应式图片的实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应式图片的实践"}},[t._v("#")]),t._v(" 响应式图片的实践")]),t._v(" "),n("p",[n("strong",[t._v("原理：")]),t._v(" 使用css的@media进行媒体查询，以决定不同像素密度下该用哪张倍图")]),t._v(" "),n("p",[n("strong",[t._v("优化方式：")]),t._v(" 一是保证高像素密度的设备下，图片仍能保持应有的清晰度，二是防止在低像素密度的设备下加载大尺寸图片造成浪费")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('.bg {\n  background-image: url("bg.png");\n  width: 100px;\n  height: 100px;\n  background-size: 100% 100%;\n}\n@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2)\n{\n  .bg {\n      background-image: url("bg@2x.png") // 尺寸为200 * 200的图\n  }\n}\n')])])]),n("p",[t._v("那么如何处理img标签呢？")]),t._v(" "),n("p",[t._v("我们可以使用HTML5中img标签的srcset来达到这个效果，看看下面这段代码：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(' <img width="320"  src="bg@2x.png" srcset="bg.png 1x;bg@2x.png 2x"/>\n')])])]),n("p",[t._v("这段代码的作用是：当设备像素密度，也就是dpr(devicePixelRatio)为1时，使用bg.png，为2时使用二倍图bg@2x.png，依此类推，你可以根据需要设置多种精度下要加载的图片，如果没有命中，浏览器会选择最邻近的一个精度对应的图片进行加载。\n要注意：老旧的浏览器不支持srcset的特性，它会继续正常加载src属性引用的图像。")]),t._v(" "),n("p",[n("strong",[t._v("弊端：")]),t._v(" 会加倍资源文件包体积；如果图片是base64形式合并到css中会增加文件体积。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://caniuse.com/#search=srcset",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看srcset的兼容性"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"按需加载减少请求压力-懒加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#按需加载减少请求压力-懒加载"}},[t._v("#")]),t._v(" 按需加载减少请求压力（懒加载）")]),t._v(" "),n("p",[n("strong",[t._v("原理：")]),t._v(" IntersectionObserver可以用来监听元素是否进入了设备的可视区域之内，这意味着：我们等待图片元素进入可视区域后，再决定是否加载它，毕竟用户没看到图片前，根本不关心它是否已经加载了。")]),t._v(" "),n("p",[n("strong",[t._v("note：")]),t._v(" 注意IE的兼容")]),t._v(" "),n("p",[n("strong",[t._v("实现方式：")]),t._v(" 当IntersectionObserver监听到图片元素进入可视区域时，将data-src”还给”src属性，这样我们就可以实现图片加载了。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<li>\n  <img class="list-item-img" alt="loading" data-src=\'a.jpg\'/>\n</li>\n<li>\n  <img class="list-item-img" alt="loading" data-src=\'b.jpg\'/>\n</li>\n<li>\n  <img class="list-item-img" alt="loading" data-src=\'c.jpg\'/>\n</li>\n<li>\n  <img class="list-item-img" alt="loading" data-src=\'d.jpg\'/>\n</li>\n\nconst observer = new IntersectionObserver(function(changes) {\n  changes.forEach(function(element, index) {\n   // 当这个值大于0，说明满足我们的加载条件了，这个值可通过rootMargin手动设置\n    if (element.intersectionRatio > 0) {\n      // 放弃监听，防止性能浪费，并加载图片。\n      observer.unobserve(element.target);\n      element.target.src = element.target.dataset.src;\n    }\n  });\n});\nfunction initObserver() {\n  const listItems = document.querySelectorAll(\'.list-item-img\');\n  listItems.forEach(function(item) {\n   // 对每个list元素进行监听\n    observer.observe(item);\n  });\n}\ninitObserver();\n')])])]),n("p",[t._v("npm实现包："),n("a",{attrs:{href:"https://www.npmjs.com/package/lozad",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lozad.js"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("strong",[t._v("其他成熟的解决方式：")])]),t._v(" "),n("p",[t._v("react-lazyload，vue-lazyload")]),t._v(" "),n("h2",{attrs:{id:"安全地使用webp图片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安全地使用webp图片"}},[t._v("#")]),t._v(" 安全地使用WebP图片")]),t._v(" "),n("p",[t._v("WebP的优势这里不再赘述，简单来说就是：同样尺寸的图片，WebP能保证比未压缩过的png、jpg、gif等格式的图片减少百分之40-70(甚至90)的比例，且保证较高的质量，更可以支持显示动态图和透明通道。")]),t._v(" "),n("p",[t._v("参考："),n("a",{attrs:{href:"https://mp.weixin.qq.com/s/oJy2fncLjtlt9XmPRWnqVw",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mp.weixin.qq.com/s/oJy2fncLjtlt9XmPRWnqVw"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"使用图标字体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用图标字体"}},[t._v("#")]),t._v(" 使用图标字体")]),t._v(" "),n("p",[t._v("iconfont 译为字体图标，即通过字体的方式展示图标，多用于渲染图标、简单图形、特殊字体等。\n使用 iconfont 时，由于只需要引入对应的字体文件，针对加载图片张数较多的情况，可有效减少\nHTTP 请求次数，而且一般字体体积较小，所以请求传输数据量较少。与直接引入图片不同，iconfont\n可以像使用字体一样，设置大小和颜色，还可以通过 CSS 设置特殊样式，且因为其是矢量图，不存在失真的情况。")]),t._v(" "),n("p",[t._v("参考： "),n("a",{attrs:{href:"https://juejin.im/post/5dc7fb87e51d454b4213c934",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.im/post/5dc7fb87e51d454b4213c934"),n("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);