(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{520:function(e,n,t){"use strict";t.r(n);var a=t(28),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[e._v("#")]),e._v(" 闭包")]),e._v(" "),t("h2",{attrs:{id:"什么是闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是闭包"}},[e._v("#")]),e._v(" 什么是闭包？？")]),e._v(" "),t("p",[e._v("闭包的组成一般是有两个函数组成，内部函数，外部函数，内部函数引用了外部函数的变量，导致起无法释放内存空间。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function A () {\n  let i = 10;\n  return function () {\n    console.log(i);\n  }\n}\nlet a = A();\na();\n")])])]),t("p",[e._v("就像此时的变量i，被内部函数引用，尽管执行完A(),其内存空间也不会释放。")]),e._v(" "),t("h2",{attrs:{id:"常见的使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的使用场景"}},[e._v("#")]),e._v(" 常见的使用场景：")]),e._v(" "),t("ul",[t("li",[e._v("预设基础值")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function makeAdder (r) {\n  return function (y) {\n    return r+y;\n  }\n}\nlet addNum = makeAdder(5);\nconsole.log(addNum(3)); // 8\n")])])]),t("ul",[t("li",[e._v("用闭包实现私有方法")])]),e._v(" "),t("p",[e._v("在编程语言中，java 是支持将方法申明为私有，即只能被同一个类中的其他方法调用\n，但是javascript不支持，因此我们可以使用闭包来模拟实现私有方法。（私有方法\n不仅仅限制了对代码的访问权限；还提供了管理全局命名空间的强大的能力，\n避免了非核心方法弄乱了代码的公共接口\n）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let Counter = function () {\n  let privateCounter = 0;\n  function changeBy (val) {\n    privateCounter += val;\n  }\n  return {\n    icrement: function () {\n      changeBy(1);\n    },\n    decrement: function () {\n      changeBy(-1);\n    },\n    value: function () {\n      return privateCounter;\n    }\n  }\n}\nvar Counter1 = new Counter();\nvar Counter2 = new Counter();\nconsole.log(Counter1.value()); /* logs 0 */\nCounter1.increment();\nCounter1.increment();\nconsole.log(Counter1.value()); /* logs 2 */\nCounter1.decrement();\nconsole.log(Counter1.value()); /* logs 1 */\nconsole.log(Counter2.value()); /* logs 0 */\n")])])]),t("p",[e._v("每个闭包都是引用自己的词法作用域内的变量privateCounter，保持各自的独立性。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures"),t("OutboundLink")],1)]),e._v(" "),t("ul",[t("li",[e._v("常见的错误场景")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for (var i=0; i<6; i++) {\n  setTimeout(function () {\n    console.log(i)\n  },0)\n}\n")])])]),t("blockquote",[t("p",[e._v("我们期望的是输出0，1，2，3，4，5\n但是结果是：6，6，6，6，6，6")])]),e._v(" "),t("blockquote",[t("p",[e._v("reason：\n在js中事件可以分为同步任务和异步任务，同步任务是那种可以立即执行的任务，例如简单的赋值，执行语句。\n异步任务则是指的是那种不会马上执行的，例如setTimeout, setInterval, promise；这种不会立马执行的异步任务，细分为\n两种：微任务，宏任务。他们都会被放置在js异步任务队列中，等待同步任务执行完之后，在通过事件轮询的方式去执行任务队列中的\n任务。")])]),e._v(" "),t("ul",[t("li",[e._v("在上面的例子中，for循环是同步任务，setTimeout是异步任务，所以for循环执行完之后i=6，然后才会去轮询异步任务队列中的事件\n，连续输出6个6。")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/qq_42833001/article/details/87252890",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/qq_42833001/article/details/87252890"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://www.cnblogs.com/jiasm/p/9482443.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/jiasm/p/9482443.html"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("修正方式：\n方案一：使用闭包")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for (var i=0; i<6; i++) {\n  (function (j) {\n    setTimeout(function () {\n      console.log(j)\n    },0)\n  })(i)\n}\n")])])]),t("p",[e._v("方案二：使用es6块级作用域let")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for (let i=0; i<6; i++) {\n  setTimeout(function () {\n    console.log(i)\n  },0)\n}\n")])])]),t("p",[e._v("方案三：合理使用setTimeout的第三个参数")]),e._v(" "),t("p",[e._v("第三个及以后参数都会作为回调函数的参数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for(var i=0; i<6;i++){\n  setTimeout(function(j){\n    console.log(j);\n  },0,i);\n}\n")])])]),t("p",[t("a",{attrs:{href:"http://caibaojian.com/settimeout-pram3.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://caibaojian.com/settimeout-pram3.html"),t("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=r.exports}}]);