(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{549:function(e,n,d){"use strict";d.r(n);var t=d(28),o=Object(t.a)({},(function(){var e=this,n=e.$createElement,d=e._self._c||n;return d("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[d("h1",{attrs:{id:"vue的diff过程"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#vue的diff过程"}},[e._v("#")]),e._v(" vue的diff过程")]),e._v(" "),d("p",[e._v("相同点：vue和react使用虚拟dom（virtual DOM），只会在同一层级去比较，如果有变化直接删除当前虚拟dom节点，插入新的节点(而不是逐层搜索遍历的方式，所以复杂度只有O(n)，因为react.vue认为那种夸层级移动DOM的操作很少。")]),e._v(" "),d("h2",{attrs:{id:"vue的diff过程-2"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#vue的diff过程-2"}},[e._v("#")]),e._v(" vue的diff过程")]),e._v(" "),d("p",[e._v("当时数据变化时，set方法会调用Dep.notify通知所有的订阅者Watcher，订阅者会调用patch给真实的DOM打补丁")]),e._v(" "),d("h3",{attrs:{id:"第一步-判断两个节点是不是相同的节点-如果不是则删除oldnode-插入新的节点"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#第一步-判断两个节点是不是相同的节点-如果不是则删除oldnode-插入新的节点"}},[e._v("#")]),e._v(" 第一步：判断两个节点是不是相同的节点，如果不是则删除oldNode，插入新的节点")]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n  /*vnode不存在则直接调用销毁钩子*/\n  if (isUndef(vnode)) {\n    if (isDef(oldVnode)) invokeDestroyHook(oldVnode)\n    return\n  }\n\n  let isInitialPatch = false\n  const insertedVnodeQueue = []\n\n  if (isUndef(oldVnode)) {\n    // empty mount (likely as component), create new root element\n    /*oldVnode未定义的时候，其实也就是root节点，创建一个新的节点*/\n    isInitialPatch = true\n    createElm(vnode, insertedVnodeQueue, parentElm, refElm)\n  } else {\n    /*标记旧的VNode是否有nodeType*/\n    const isRealElement = isDef(oldVnode.nodeType)\n    if (!isRealElement && sameVnode(oldVnode, vnode)) {\n      // patch existing root node\n      /*是同一个节点的时候直接修改现有的节点*/\n      patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)\n    } else {\n      if (isRealElement) {\n        // mounting to a real element\n        // check if this is server-rendered content and if we can perform\n        // a successful hydration.\n        if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n          /*当旧的VNode是服务端渲染的元素，hydrating记为true*/\n          oldVnode.removeAttribute(SSR_ATTR)\n          hydrating = true\n        }\n        if (isTrue(hydrating)) {\n          /*需要合并到真实Dom上*/\n          if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n            /*调用insert钩子*/\n            invokeInsertHook(vnode, insertedVnodeQueue, true)\n            return oldVnode\n          } else if (process.env.NODE_ENV !== 'production') {\n            warn(\n              'The client-side rendered virtual DOM tree is not matching ' +\n              'server-rendered content. This is likely caused by incorrect ' +\n              'HTML markup, for example nesting block-level elements inside ' +\n              '<p>, or missing <tbody>. Bailing hydration and performing ' +\n              'full client-side render.'\n            )\n          }\n        }\n        // either not server-rendered, or hydration failed.\n        // create an empty node and replace it\n        /*如果不是服务端渲染或者合并到真实Dom失败，则创建一个空的VNode节点替换它*/\n        oldVnode = emptyNodeAt(oldVnode)\n      }\n      // replacing existing element\n      /*取代现有元素*/\n      const oldElm = oldVnode.elm\n      const parentElm = nodeOps.parentNode(oldElm)\n      createElm(\n        vnode,\n        insertedVnodeQueue,\n        // extremely rare edge case: do not insert if old element is in a\n        // leaving transition. Only happens when combining transition +\n        // keep-alive + HOCs. (#4590)\n        oldElm._leaveCb ? null : parentElm,\n        nodeOps.nextSibling(oldElm)\n      )\n\n      if (isDef(vnode.parent)) {\n        // component root element replaced.\n        // update parent placeholder node element, recursively\n        /*组件根节点被替换，遍历更新父节点element*/\n        let ancestor = vnode.parent\n        while (ancestor) {\n          ancestor.elm = vnode.elm\n          ancestor = ancestor.parent\n        }\n        if (isPatchable(vnode)) {\n          /*调用create回调*/\n          for (let i = 0; i < cbs.create.length; ++i) {\n            cbs.create[i](emptyNode, vnode.parent)\n          }\n        }\n      }\n\n      if (isDef(parentElm)) {\n        /*移除老节点*/\n        removeVnodes(parentElm, [oldVnode], 0, 0)\n      } else if (isDef(oldVnode.tag)) {\n        /*调用destroy钩子*/\n        invokeDestroyHook(oldVnode)\n      }\n    }\n  }\n\n  /*调用insert钩子*/\n  invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)\n  return vnode.elm\n}\n")])])]),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("/*\n  判断两个VNode节点是否是同一个节点，需要满足以下条件\n  key相同\n  tag（当前节点的标签名）相同\n  isComment（是否为注释节点）相同\n  是否data（当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息）都有定义\n  当标签是<input>的时候，type必须相同\n*/\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key &&\n    a.tag === b.tag &&\n    a.isComment === b.isComment &&\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b)\n  )\n}\n\n// Some browsers do not support dynamically changing type for <input>\n// so they need to be treated as different nodes\n/*\n  判断当标签是<input>的时候，type是否相同\n  某些浏览器不支持动态修改<input>类型，所以他们被视为不同节点\n*/\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') return true\n  let i\n  const typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type\n  const typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type\n  return typeA === typeB\n}\n")])])]),d("h3",{attrs:{id:"第二步-如果两个节点的el-以及key值相同就会去对比其子节点"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#第二步-如果两个节点的el-以及key值相同就会去对比其子节点"}},[e._v("#")]),e._v(" 第二步：如果两个节点的el，以及key值相同就会去对比其子节点")]),e._v(" "),d("p",[e._v("具体过程如下：")]),e._v(" "),d("ol",[d("li",[d("p",[e._v("找到真实的DOM称为el")])]),e._v(" "),d("li",[d("p",[e._v("判断Vnode, oldVnode是否为同一个对象，如果是直接结束")])]),e._v(" "),d("li",[d("p",[e._v("如果子节点是文本节点且不相等，那么将el的文本节点设置为Vnode的文本节点")])]),e._v(" "),d("li",[d("p",[e._v("如果不是文本节点，oldVnode有子节点而Vnode没有，则删除el的子节点")])]),e._v(" "),d("li",[d("p",[e._v("如果oldVnode没有子节点而Vnode有，则将Vnode的子节点真实化之后添加到el")])]),e._v(" "),d("li",[d("p",[e._v("如果两者都有子节点，则执行updateChildren函数比较子节点")])])]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v(" /*patch VNode节点*/\nfunction patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n  /*两个VNode节点相同则直接返回*/\n  if (oldVnode === vnode) {\n    return\n  }\n  // reuse element for static trees.\n  // note we only do this if the vnode is cloned -\n  // if the new node is not cloned it means the render functions have been\n  // reset by the hot-reload-api and we need to do a proper re-render.\n  /*\n    如果新旧VNode都是静态的，同时它们的key相同（代表同一节点），\n    并且新的VNode是clone或者是标记了once（标记v-once属性，只渲染一次），\n    那么只需要替换elm以及componentInstance即可。\n  */\n  if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {\n    vnode.elm = oldVnode.elm\n    vnode.componentInstance = oldVnode.componentInstance\n    return\n  }\n  let i\n  const data = vnode.data\n  if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n    /*i = data.hook.prepatch，如果存在的话，见\"./create-component componentVNodeHooks\"。*/\n    i(oldVnode, vnode)\n  }\n  const elm = vnode.elm = oldVnode.elm\n  const oldCh = oldVnode.children\n  const ch = vnode.children\n  if (isDef(data) && isPatchable(vnode)) {\n    /*调用update回调以及update钩子*/\n    for (i = 0; i < cbs.update.length; ++i) cbs.update[i](oldVnode, vnode)\n    if (isDef(i = data.hook) && isDef(i = i.update)) i(oldVnode, vnode)\n  }\n  /*如果这个VNode节点没有text文本时*/\n  if (isUndef(vnode.text)) {\n    if (isDef(oldCh) && isDef(ch)) {\n      /*新老节点均有children子节点，则对子节点进行diff操作，调用updateChildren*/\n      if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n    } else if (isDef(ch)) {\n      /*如果老节点没有子节点而新节点存在子节点，先清空elm的文本内容，然后为当前节点加入子节点*/\n      if (isDef(oldVnode.text)) nodeOps.setTextContent(elm, '')\n      addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue)\n    } else if (isDef(oldCh)) {\n      /*当新节点没有子节点而老节点有子节点的时候，则移除所有ele的子节点*/\n      removeVnodes(elm, oldCh, 0, oldCh.length - 1)\n    } else if (isDef(oldVnode.text)) {\n      /*当新老节点都无子节点的时候，只是文本的替换，因为这个逻辑中新节点text不存在，所以直接去除ele的文本*/\n      nodeOps.setTextContent(elm, '')\n    }\n  } else if (oldVnode.text !== vnode.text) {\n    /*当新老节点text不一样时，直接替换这段文本*/\n    nodeOps.setTextContent(elm, vnode.text)\n  }\n  /*调用postpatch钩子*/\n  if (isDef(data)) {\n    if (isDef(i = data.hook) && isDef(i = i.postpatch)) i(oldVnode, vnode)\n  }\n}\n")])])]),d("h3",{attrs:{id:"第三步-非文本节点的updatechildren"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#第三步-非文本节点的updatechildren"}},[e._v("#")]),e._v(" 第三步：非文本节点的updateChildren")]),e._v(" "),d("ol",[d("li",[e._v("取出新旧节点的所有子节点oldCh, newCh，设置两个头尾的变量StartIndex, EndIndex，两两进行比较，如果有比较成功的就进行Vnode位置更新。")]),e._v(" "),d("li",[e._v("如果设置了key值就会使用key值进行比较，在比较的过程中变量会往中间靠，一旦StartIndex > EndIx 表明oldCh和newCh至少有一个已经遍历完了，就会结束比较进行节点的删除或者直接添加。")])]),e._v(" "),d("div",{staticClass:"language- extra-class"},[d("pre",{pre:!0,attrs:{class:"language-text"}},[d("code",[e._v("function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n  let oldStartIdx = 0\n  let newStartIdx = 0\n  let oldEndIdx = oldCh.length - 1\n  let oldStartVnode = oldCh[0]\n  let oldEndVnode = oldCh[oldEndIdx]\n  let newEndIdx = newCh.length - 1\n  let newStartVnode = newCh[0]\n  let newEndVnode = newCh[newEndIdx]\n  let oldKeyToIdx, idxInOld, elmToMove, refElm\n\n  // removeOnly is a special flag used only by <transition-group>\n  // to ensure removed elements stay in correct relative positions\n  // during leaving transitions\n  const canMove = !removeOnly\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (isUndef(oldStartVnode)) {\n      oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n    } else if (isUndef(oldEndVnode)) {\n      oldEndVnode = oldCh[--oldEndIdx]\n    } else if (sameVnode(oldStartVnode, newStartVnode)) { // ** 第一种比较方式 **\n      /*前四种情况其实是指定key的时候，判定为同一个VNode，则直接patchVnode即可，分别比较oldCh以及newCh的两头节点2*2=4种情况*/\n      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)\n      oldStartVnode = oldCh[++oldStartIdx]\n      newStartVnode = newCh[++newStartIdx]\n    } else if (sameVnode(oldEndVnode, newEndVnode)) { // ** 第二种比较方式 **\n      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)\n      oldEndVnode = oldCh[--oldEndIdx]\n      newEndVnode = newCh[--newEndIdx]\n    } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right  ** 第三种比较方式 **\n      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)\n      canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n      oldStartVnode = oldCh[++oldStartIdx]\n      newEndVnode = newCh[--newEndIdx]\n    } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left  ** 第四种比较方式 **\n      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)\n      canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n      oldEndVnode = oldCh[--oldEndIdx]\n      newStartVnode = newCh[++newStartIdx]\n    } else {\n      /*\n        生成一个key与旧VNode的key对应的哈希表（只有第一次进来undefined的时候会生成，也为后面检测重复的key值做铺垫）\n        比如childre是这样的 [{xx: xx, key: 'key0'}, {xx: xx, key: 'key1'}, {xx: xx, key: 'key2'}]  beginIdx = 0   endIdx = 2  \n        结果生成{key0: 0, key1: 1, key2: 2}\n      */\n      if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n      /*如果newStartVnode新的VNode节点存在key并且这个key在oldVnode中能找到则返回这个节点的idxInOld（即第几个节点，下标）*/\n      idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null\n      if (isUndef(idxInOld)) { // New element\n        /*newStartVnode没有key或者是该key没有在老节点中找到则创建一个新的节点*/\n        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm)\n        newStartVnode = newCh[++newStartIdx]\n      } else {\n        /*获取同key的老节点*/\n        elmToMove = oldCh[idxInOld]\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n          /*如果elmToMove不存在说明之前已经有新节点放入过这个key的DOM中，提示可能存在重复的key，确保v-for的时候item有唯一的key值*/\n          warn(\n            'It seems there are duplicate keys that is causing an update error. ' +\n            'Make sure each v-for item has a unique key.'\n          )\n        }\n        if (sameVnode(elmToMove, newStartVnode)) {\n          /*Github:https://github.com/answershuto*/\n          /*如果新VNode与得到的有相同key的节点是同一个VNode则进行patchVnode*/\n          patchVnode(elmToMove, newStartVnode, insertedVnodeQueue)\n          /*因为已经patchVnode进去了，所以将这个老节点赋值undefined，之后如果还有新节点与该节点key相同可以检测出来提示已有重复的key*/\n          oldCh[idxInOld] = undefined\n          /*当有标识位canMove实可以直接插入oldStartVnode对应的真实DOM节点前面*/\n          canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm)\n          newStartVnode = newCh[++newStartIdx]\n        } else {\n          // same key but different element. treat as new element\n          /*当新的VNode与找到的同样key的VNode不是sameVNode的时候（比如说tag不一样或者是有不一样type的input标签），创建一个新的节点*/\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm)\n          newStartVnode = newCh[++newStartIdx]\n        }\n      }\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    /*全部比较完成以后，发现oldStartIdx > oldEndIdx的话，说明老节点已经遍历完了，新节点比老节点多，所以这时候多出来的新节点需要一个一个创建出来加入到真实DOM中*/\n    refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm\n    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n  } else if (newStartIdx > newEndIdx) {\n    /*如果全部比较完成以后发现newStartIdx > newEndIdx，则说明新节点已经遍历完了，老节点多余新节点，这个时候需要将多余的老节点从真实DOM中移除*/\n    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n  }\n}\n")])])]),d("p",[d("a",{attrs:{href:"https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown",target:"_blank",rel:"noopener noreferrer"}},[e._v("代码来源learVue"),d("OutboundLink")],1)]),e._v(" "),d("h2",{attrs:{id:"相比react-diff的不同"}},[d("a",{staticClass:"header-anchor",attrs:{href:"#相比react-diff的不同"}},[e._v("#")]),e._v(" 相比react diff的不同")]),e._v(" "),d("p",[e._v("Vue diff使用的双向链表形式边对比，边更新DOM（starIndex, endIndex的使用）")]),e._v(" "),d("p",[e._v("react 使用diff队列保存需要更新的DOM（从头到尾一一比较）得到patch树，在统一的批量更新DOM。")]),e._v(" "),d("p",[d("a",{attrs:{href:"https://github.com/aooy/blog/issues/2",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue2.0的diff算法"),d("OutboundLink")],1),e._v("，"),d("a",{attrs:{href:"https://github.com/answershuto/learnVue/blob/master/docs/VirtualDOM%E4%B8%8Ediff(Vue%E5%AE%9E%E7%8E%B0).MarkDown",target:"_blank",rel:"noopener noreferrer"}},[e._v("vNode"),d("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=o.exports}}]);