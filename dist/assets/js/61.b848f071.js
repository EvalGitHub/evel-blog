(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{509:function(t,e,r){"use strict";r.r(e);var o=r(28),s=Object(o.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"为什么要区分简单请求和非简单请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要区分简单请求和非简单请求"}},[t._v("#")]),t._v(" 为什么要区分简单请求和非简单请求")]),t._v(" "),r("p",[t._v("CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）")]),t._v(" "),r("h2",{attrs:{id:"什么是简单请求以及特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是简单请求以及特点"}},[t._v("#")]),t._v(" 什么是简单请求以及特点")]),t._v(" "),r("p",[r("strong",[t._v("定义：")]),t._v(" 简单请求就是普通的"),r("strong",[t._v("HTML Form")]),t._v("在"),r("strong",[t._v("不依赖脚本的情况下发出的请求")]),t._v("，非简单请求就是HTML form无法实现的请求，比如PUT（需要其他的内容编码，自定义请求头）")]),t._v(" "),r("p",[r("strong",[t._v("简单请求的特点：")])]),t._v(" "),r("ul",[r("li",[t._v("请求方法只能是GET，POST，HEAD")]),t._v(" "),r("li",[t._v("HTTP请求头只能是Accept/Accept-Language/Content-Language/Content-Type")]),t._v(" "),r("li",[t._v("请求头Content-Type的值只能是“text/plain”（普通文本），“multipart/form-data”（文件上传），“application/x-www-form-urlencoded”（表单提交）")])]),t._v(" "),r("p",[t._v("表单请求的可以使用enctype在发送表单数据之前对其进行编码，而其值只能是众多媒体类型（用来表示文档、文件或字节流的性质和格式）中的三种")]),t._v(" "),r("p",[t._v("text/plain , multipart-formdata , application/x-www-form-urlencoded")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types",target:"_blank",rel:"noopener noreferrer"}},[t._v("常见的媒体类型"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("strong",[t._v("非简单请求")])]),t._v(" "),r("p",[t._v("定义：就是无法用HTML Form实现的请求")]),t._v(" "),r("h2",{attrs:{id:"为什么要请求预检cross-prefight"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要请求预检cross-prefight"}},[t._v("#")]),t._v(" 为什么要请求预检cross-prefight？")]),t._v(" "),r("p",[t._v("对于简单请求而言是完全不需要的，因为简单请求（form发出的请求）是不存在跨域问题的；因为他只是负责将请求发出去，而不需要接收请求的响应，浏览器认为是安全的；（对于使用ajax在跨域请求下也能将请求成功发送出去，服务器也能接到请求，但是由于同源策略的问题，浏览器会报错）；随着ajax的流行，以及cors解决跨域方案的出现。")]),t._v(" "),r("p",[t._v("CORS-preflight浏览器先单独请求一次，询问服务器某个资源是否可以跨源，如果不允许的话就不发实际的请求；如果允许的话，浏览器会记住，然后发实际请求，且之后每次就都直接请求而不用再询问服务器否可以跨域了。")]),t._v(" "),r("p",[t._v("一般来说如果是cros跨域，服务器需要设置：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Access-Control-Allow-Origin: http://api.com | *         // 被通过的白名单\nAccess-Control-Allow-Credentials: true                  // 是否需要cookie\nAccess-Control-Allow-Methods: POST, GET, OPTIONS | *\n")])])]),r("ul",[r("li",[r("p",[t._v("Access-Control-Allow-Origin :该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求")])]),t._v(" "),r("li",[r("p",[t._v("Access-Control-Allow-Credentials: 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。(注意：如果要发送cookie，不仅要进行上述的设置，还要在AJAX请求中设置withCredentials属性）")])])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("var xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://example.com/', true);\nxhr.withCredentials = true;\nxhr.send(null);\n")])])]),r("p",[t._v("预检就是检查请求来源的域名是否在cors的白名单中，以及请求方法是否被允许。")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域资源共享 CORS 详解"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);