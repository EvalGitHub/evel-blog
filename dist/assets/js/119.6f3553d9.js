(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{579:function(t,e,n){"use strict";n.r(e);var s=n(28),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"前端引入通过script引入js的几种方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前端引入通过script引入js的几种方式"}},[t._v("#")]),t._v(" 前端引入通过script引入js的几种方式")]),t._v(" "),n("h2",{attrs:{id:"直接通过script标签"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#直接通过script标签"}},[t._v("#")]),t._v(" 直接通过script标签")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<script type="text/javascript" \n  charset="utf-8"\n  src="http://connect.qq.com/qc_jssdk.js">\n<\/script>\n')])])]),n("p",[t._v("一般情况下这中操作是没问题的，但是在webpack畅行的前端中，如果引入的是相对地址文件(项目中的下载的一个lib文件)，例如下面的操作")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<script type="text/javascript" \n  charset="utf-8"\n  src="../lib/connect.qq.com/qc_jssdk.js">\n<\/script>\n')])])]),n("p",[t._v("这种情况下可能就会出现问题，最终经过打包之后你会发现打包好的文件中并没有这个qc_jssdk.js文件，原因就是webpack tree shaking的优化使不用的文件被丢弃。")]),t._v(" "),n("p",[t._v("针对这个问题我们可以使用copy-webpack-plugin来解决。")]),t._v(" "),n("h2",{attrs:{id:"动态创建script-赋值src属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态创建script-赋值src属性"}},[t._v("#")]),t._v(" 动态创建script，赋值src属性")]),t._v(" "),n("p",[t._v("实现方式：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function dynamicAddJs() {\n  if (['product'].includes(getConfig().env)) {\n    let ele = document.createElement('script');\n    ele.src = `/lib/qc_jssdk.js`;\n    ele.type = 'text/javascript';\n    ele.charset = 'utf-8';\n    if (document.documentElement.append) {\n      document.documentElement.append(ele);\n    } else {\n      document.documentElement.appendChild(ele);\n    }\n  }\n}\n")])])]),n("p",[t._v("常见问题：如果是绝对地址没问题，如果是相对地址就会出现404，因为在预编译的时候webpack会觉得这个资源没用到而不打包。")]),t._v(" "),n("p",[n("strong",[t._v("解决方案：")]),t._v(" 使用copy-webpack-plugin配合使用")]),t._v(" "),n("p",[t._v("这个插件的作用就是可以手动的将一些文件拷贝到打包之后指定文件中，具体实现：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const CopyPlugin = require('copy-webpack-plugin');\n......\n......\nplugins: [\n  new CopyPlugin([\n    {\n      from: path.resolve(__dirname, '../src/lib/**.*'),\n      top: path.resolve(__dirname, '../build/lib/[name].[ext]')\n    }\n  ])\n],\n")])])]),n("p",[t._v("上面的代码就是将src/lib下面的所有文件拷贝到打包之后的build/lib文件下，解决了打包之后的文件中存在需要加载的目标文件，接着就可以通过script动态加载了，代码同上。")]),t._v(" "),n("p",[n("strong",[t._v("note：")]),t._v(" 注意src地址不能写成'./lib/**.js’否则会有问题；\n【./于/的区别】./是相对地址， /是绝对地址。")]),t._v(" "),n("h2",{attrs:{id:"使用webpack-dllplugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用webpack-dllplugin"}},[t._v("#")]),t._v(" 使用webpack.DllPlugin")]),t._v(" "),n("p",[t._v("加载资源的最终效果是生成一个script标签，src属性为我们的需要的目标文件。因此可以借助webpack.DllPlugin巧妙的实现。")]),t._v(" "),n("p",[t._v("webpack.DllPlugin使用来加快编译速度的，他的作用就是将那些固定不变的库或者插件单独抽离出来，使webpack在进行项目打包的时候不需要重复性的编译这些文件，提升打包速度，最终在index.html中将这些文件通过script方式引入。")]),t._v(" "),n("p",[t._v("了解原理之后我们需要做的就是将qc_jssdk.js通过webpack.DllPlugin生成script标签引入即可。")]),t._v(" "),n("p",[n("strong",[t._v("需要注意的几个问题：")])]),t._v(" "),n("ul",[n("li",[t._v("这个库文件我们不希望babel再进行编译（看个人需求）")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("test: /\\.js$/,\nexclude: /(node_modules|bower_components|src\\/lib\\/qc_jssdk.js)/,\nuse: {\n  loader: 'babel-loader',\n  options: { .... }\n")])])]),n("ul",[n("li",[t._v("需要确定这个文件是一个模块")])]),t._v(" "),n("p",[t._v("通过module.exports进行处理过")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 一般的lib都是个自执行函数,形式如下,需要转换为一个模块\nlet qc_jssdk = function() {.....}();\nmodule.exports = qc_jssdk; \n")])])]),n("ul",[n("li",[t._v("要想这个文件被执行，需要在入口文件通过import引入")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("require('./lib/qc_jssdk.js');\n")])])]),n("h2",{attrs:{id:"通过nodejs读取打包之后的文件-动态替换内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通过nodejs读取打包之后的文件-动态替换内容"}},[t._v("#")]),t._v(" 通过nodeJS读取打包之后的文件，动态替换内容")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const htmlContent = fs.readFileSync('./build/index.html', 'utf8', \n  function (err, data) {\n    if (err) {\n      console.error(err);\n      return false;\n    }\n  });\n\nconst scriptContent = fs.readFileSync('./src/libs/qc_jssdk.js', 'utf8', \n  function (err, data) {\n    if (err) {\n      console.error(err);\n      return false;\n    }\n  });\n\nconst dynamicScript = `<script type='text/javascript' defer async>${scriptContent}<\/script>`;\n\nconst newHtml = htmlContent.replace(/\x3c!-- qc_jssdk inject import --\x3e/i, dynamicScript);\n\nfs.writeFileSync('./build/index.html', newHtml, 'utf8', \n  function (err) {\n    if (err) {\n      console.error(err);\n      return false;\n    }\n  });\n")])])]),n("h2",{attrs:{id:"使用htmlwebpackplugin提供的hook"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用htmlwebpackplugin提供的hook"}},[t._v("#")]),t._v(" 使用HtmlWebpackPlugin提供的hook")]),t._v(" "),n("p",[t._v("HtmlWebpackPlugin这个插件是用于为webpack打包文件提供服务的，生成简易模板，可以挂载script标签，css link标签。")]),t._v(" "),n("p",[t._v("他提供了些许hook，我们可以利用某些hook做动态插入script的需求。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/jantimon/html-webpack-plugin#events",target:"_blank",rel:"noopener noreferrer"}},[t._v("htmlWebpackPlugin的hook"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"创建一个webpack插件用于动态插入script"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建一个webpack插件用于动态插入script"}},[t._v("#")]),t._v(" 创建一个webpack插件用于动态插入script")]),t._v(" "),n("ul",[n("li",[t._v("创建html-alert-plugin")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nclass HtmlAlertPlugin {\n  apply(compiler) {\n    compiler.hooks.complition.tap('HtmlAlertPlugin', (compiltion) => {\n      HtmlWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync('HtmlAlertPlugin', (data, cb) => {\n        data.html = data.html.replace(/<\\/head>/, '<script src=\"https:some.name.link.js\"><\/script>')\n        cb(null, data)\n      })\n    })\n  }\n}\nmodule.exports = HtmlAlertPlugin\n")])])]),n("ul",[n("li",[t._v("插件应用")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("plugins: [\n  new HtmlWebpackPlugin({\n    template: './index.html', // 文件模板\n    filename: `index.html`, // 生成的文件名\n    chunks: ['vendors', 'main'] // 需要引入的模块js\n  }),\n  new HtmlAlertPlugin(),\n]\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);