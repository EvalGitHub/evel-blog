(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{528:function(t,e,a){"use strict";a.r(e);var n=a(28),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"mobx的学习与使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mobx的学习与使用"}},[t._v("#")]),t._v(" mobx的学习与使用")]),t._v(" "),a("h2",{attrs:{id:"mobx是解决什么问题的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mobx是解决什么问题的"}},[t._v("#")]),t._v(" mobx是解决什么问题的？")]),t._v(" "),a("p",[t._v("mobx是用来解决项目开发中的状态管理的工具，在某种角度上讲它和redux做着同样的事情，但是处理方式相比redux来说简单很多。")]),t._v(" "),a("h2",{attrs:{id:"mobx工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mobx工作原理"}},[t._v("#")]),t._v(" mobx工作原理？")]),t._v(" "),a("p",[t._v("通过object.defineproperty/proxy将所有数据都变成响应式的")]),t._v(" "),a("h2",{attrs:{id:"与redux的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与redux的区别"}},[t._v("#")]),t._v(" 与redux的区别")]),t._v(" "),a("p",[t._v("redux的工作流程，dispatch一个action({type, preload})，在reducer中匹配action的type值，修改state然后返回一个新的state，如果需要对应视图的变化，则需要通过this.setState()这种方式；相比而言mobx将所有数据变成了响应式的，监听数据的变化，如果数据变化了可以自动的更新视图（前提是组件也需要被设置成响应式组件）。")]),t._v(" "),a("h2",{attrs:{id:"重要概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重要概念"}},[t._v("#")]),t._v(" 重要概念")]),t._v(" "),a("p",[t._v("在使用mobx的时候建议配制")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// “强制动作” 强制所有状态变更都必须通过动作来完成。在大型、长期的项目中，这是十分有用的最佳实践\nconfigure({ enforceActions: true });\n")])])]),a("h3",{attrs:{id:"observable-observable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#observable-observable"}},[t._v("#")]),t._v(" observable/@observable")]),t._v(" "),a("ol",[a("li",[t._v("使用obsevable将数据变成响应式的，内部原理也是使用Object.defineproperty / proxy来对数据进行劫持监听")]),t._v(" "),a("li",[t._v("把一个普通的 JavaScript 对象传递给 observable 方法，对象的所有属性都将被拷贝至一个克隆对象并将克隆对象转变成可观察的")])]),t._v(" "),a("p",[t._v("@observable是observable的装饰器形式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 正对对象：\nconst person = observable({\n  firstName: "Clive Staples",\n  lastName: "Lewis"\n});\n\n// 数组\nconst list = observable([1, 2, 4]);\n\n// 原始数据\n@observable price = 0;\n@observable amount = 1;\n\n@computed get total() {\n  return this.price * this.amount;\n}\n')])])]),a("p",[t._v("对于单个数据的另一种处理形式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('import {observable} from "mobx";\nconst cityName = observable.box("Vienna");\n\ncityName.observe(function(change) {\n  console.log(change.oldValue, "->", change.newValue);\n});\ncityName.set("Amsterdam");\n')])])]),a("h3",{attrs:{id:"computed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed"}},[t._v("#")]),t._v(" @computed")]),t._v(" "),a("p",[t._v("可以在任意类属性的getter上使用 @computed 装饰器来声明式的创建计算属性")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@observable price = 0;\n@observable amount = 1;\n@computed get total() {\n  return this.price * this.amount;\n}\n\nincreasePriece() {\n  this.price++;\n}\n")])])]),a("p",[t._v("如果price变化了，total也会自动变化")]),t._v(" "),a("h3",{attrs:{id:"autorun"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autorun"}},[t._v("#")]),t._v(" autorun")]),t._v(" "),a("p",[t._v("autorun(callback, object{\ndelay: 可用于对效果函数进行去抖动的数字(以毫秒为单位)。如果是 0(默认值) 的话，那么不会进行去抖。")]),t._v(" "),a("p",[t._v("})")]),t._v(" "),a("blockquote",[a("p",[t._v("autorun用于监听受控数据的变化，如果数据变化了，这个方法会自动触发，在某种程度上和computed的功能相似，区别在于autorun不会产生新的受控数据，而computed会产生新的受控数据；因此autorun被用于异步接口数据请求。")])]),t._v(" "),a("p",[t._v("在函数创建之初会自动执行一次。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const MobxState:any = observable({\n  count: 0,\n  price: 100,\n  total: 0,\n})\n....\n....\n\nlet disposer = autorun(() => {\n  MobxState.total = MobxState.count * MobxState.price;\n  console.log('autorun执行了');\n}, {\n  delay: 300 // 每次变化时将其发送给服务器，但发送前至少要等300毫秒\n})\n// disposer(); 如果执行了这个，以后就不会监听了\n")])])]),a("p",[t._v("区分computed和autorun ?")]),t._v(" "),a("blockquote",[a("p",[t._v("如果你想响应式的产生一个可以被其它 observer 使用的值，请使用 @computed，如果你不想产生一个新值，而想要达到一个效果，请使用 autorun。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用。")])]),t._v(" "),a("h3",{attrs:{id:"reaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reaction"}},[t._v("#")]),t._v(" reaction")]),t._v(" "),a("p",[t._v("reaction是autorun的更加精细的控制")]),t._v(" "),a("p",[t._v("在函数"),a("strong",[t._v("创建之初会不会执行")]),t._v("。")]),t._v(" "),a("p",[t._v("基础用法：")]),t._v(" "),a("blockquote",[a("p",[t._v("reaction(() => data, (data, reaction) => { sideEffect }, options?)")])]),t._v(" "),a("p",[t._v("第一个函数被称为数据函数，第二个函数被称为效果函数；")]),t._v(" "),a("p",[t._v("Reaction在创建之初不会立即执行，只有在数据表达式首次返回一个新值后才会运行。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("reaction(() => MobxState.count, (data, reaction) => {\n  console.log('reaction中的data' + data) \n  if (data === 10) {\n    reaction.dispose(); // 清除这个监听\n  }\n})\n")])])]),a("p",[a("strong",[t._v("note：效果函数仅对数据函数中访问的数据作出反应")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('const reaction3 = reaction(\n  () => counter.count,\n  (count, reaction) => {\n    console.log("reaction 3: invoked. counter.count = " + count);\n    reaction.dispose();\n  }\n);\n')])])]),a("p",[t._v("传入 reaction 的第二个函数(副作用函数)当调用时会接收两个参数。 第一个参数是由 data 函数返回的值。 第二个参数是当前的 reaction，可以用来在执行期间清理 reaction。")]),t._v(" "),a("h3",{attrs:{id:"when"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when"}},[t._v("#")]),t._v(" when")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("constructor(props:initProps) {\n    super(props);\n    when(\n       // 第一个函数是一个条件值，返回true就会执行第二个\n       // 函数（然后就会被清除，意味着只能执行一次）\n      () => MobxState.count === 5,\n      () => this.getAlertMsg(),\n    );\n    autorun(() => {\n      MobxState.total = MobxState.count * MobxState.price;\n      console.log('autorun执行了');\n    })\n  }\n")])])]),a("h3",{attrs:{id:"action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" action")]),t._v(" "),a("p",[t._v("如果我们配制了"),a("strong",[t._v("configure({ enforceActions: true });")]),t._v("，那么就要求所有针对observe的数据更改，需要在action中进行，否则会报错")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class MobxUse extends React.Component<initProps, initState>{\n  @observable age = 0;\n\n  @action.bound // 所有状态变更都必须通过动作来完成。\n  changeAge = () => {\n    this.age++;\n  }\n  render() {\n    return <>\n      <button className={style.btn} onClick={this.changeAge}>changeAge++</button>\n    </>;\n  }\n}\n")])])]),a("h3",{attrs:{id:"runinaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runinaction"}},[t._v("#")]),t._v(" runInAction")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('mobx.configure({ enforceActions: true })\n\nclass Store {\n    @observable githubProjects = []\n    @observable state = "pending" // "pending" / "done" / "error"\n\n    @action\n    fetchProjects() {\n        this.githubProjects = []\n        this.state = "pending"\n        fetchGithubProjectsSomehow().then(\n            projects => {\n                const filteredProjects = somePreprocessing(projects)\n                // 将‘“最终的”修改放入一个异步动作中\n                runInAction(() => {\n                    this.githubProjects = filteredProjects\n                    this.state = "done"\n                })\n            },\n            error => {\n                // 过程的另一个结局:...\n                runInAction(() => {\n                    this.state = "error"\n                })\n            }\n        )\n    }\n}\n')])])]),a("p",[a("a",{attrs:{href:"https://cn.mobx.js.org/best/actions.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用与异步处理"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"使用mobx的理由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用mobx的理由"}},[t._v("#")]),t._v(" 使用mobx的理由")]),t._v(" "),a("ol",[a("li",[t._v("使用mobx+react项目类似与vue，可以在数据状态更新之后立即获取最新的值（不存在setState的异步问题）")]),t._v(" "),a("li",[t._v("如果状态值没有更新就不会触发组件的重新渲染，省去了shouldComponentUpdate/immutable.js这几个优化操作")]),t._v(" "),a("li",[t._v("对比redux较简单，而且不需要其他的中间件（例如react-redux， redux-saga）")])]),t._v(" "),a("h2",{attrs:{id:"observer-函数-装饰器可以用来将-react-组件转变成响应式组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#observer-函数-装饰器可以用来将-react-组件转变成响应式组件"}},[t._v("#")]),t._v(" observer 函数/装饰器可以用来将 React 组件转变成响应式组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { observer } from 'mobx-react';\n\n@observer class MobxUse extends React.Component<initProps, initState> {\n  // @observable count = 0;\n  constructor(props:initProps) {\n    super(props);\n    when( // 第一个函数是一个条件值，返回true就会执行第二个函数（然后就会被清除，意味着只能执行一次）\n      () => MobxState.count === 5,\n      () => this.getAlertMsg(),\n    );\n    autorun(() => {\n      MobxState.total = MobxState.count * MobxState.price;\n      console.log('autorun执行了');\n    })\n  }\n\n  render() {\n    return (\n      <>\n        ....\n        ....\n      </>\n    )\n  }\n}\n")])])]),a("p",[t._v("如果是无状态组件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const Timer = observer(({ timerData }) =>\n    <span>Seconds passed: { timerData.secondsPassed } </span>\n);\n")])])]),a("ul",[a("li",[t._v("参考链接：\nhttps://cn.mobx.js.org/refguide/tojson.html")])]),t._v(" "),a("p",[t._v("https://mobx-react.js.org/observer-hook")]),t._v(" "),a("p",[t._v("https://ymbo.github.io/2018/03/06/mobx%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/")])])}),[],!1,null,null,null);e.default=r.exports}}]);