(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{522:function(e,n,r){"use strict";r.r(n);var t=r(28),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"express中间件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express中间件"}},[e._v("#")]),e._v(" express中间件")]),e._v(" "),r("h2",{attrs:{id:"express中间件类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express中间件类型"}},[e._v("#")]),e._v(" express中间件类型")]),e._v(" "),r("ul",[r("li",[e._v("应用层中间件")])]),e._v(" "),r("p",[e._v("常用实现方法：app.use / app.method")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var app = express()\n\napp.use(function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\napp.use('/user/:id', function (req, res, next) {\n  console.log('Request Type:', req.method)\n  next()\n})\n")])])]),r("ul",[r("li",[e._v("路由层中间件")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var app = express()\nvar router = express.Router()\n\n// a middleware function with no mount path. This code is executed for every request to the router\nrouter.use(function (req, res, next) {\n  console.log('Time:', Date.now())\n  next()\n})\n")])])]),r("ul",[r("li",[e._v("错误处理中间件")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("app.use(function (err, req, res, next) {\n  console.error(err.stack)\n  res.status(500).send('Something broke!')\n})\n")])])]),r("ul",[r("li",[e._v("内置中间件")])]),e._v(" "),r("blockquote",[r("p",[e._v("express.static，express.json，express.urlencoded")])]),e._v(" "),r("ul",[r("li",[e._v("第三方中间件 - "),r("a",{attrs:{href:"https://www.expressjs.com.cn/resources/middleware.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("来自社区"),r("OutboundLink")],1)])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var express = require('express')\nvar app = express()\nvar cookieParser = require('cookie-parser')\n// load the cookie-parsing middleware\napp.use(cookieParser())\n")])])]),r("h2",{attrs:{id:"中间件解释"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#中间件解释"}},[e._v("#")]),e._v(" 中间件解释")]),e._v(" "),r("blockquote",[r("p",[e._v("中间件是一个"),r("strong",[e._v("函数模块")]),e._v("，他可以修改request object, response object；结束request-response循环，调用stack中的下一个中间件。")])]),e._v(" "),r("p",[e._v("如果当前中间件没有并不打算结束整个request-response cycle，需要调用 "),r("strong",[e._v("next()")]),e._v(" 将控制权交给下一个中间件，否则将会使得请求挂起。")]),e._v(" "),r("p",[e._v("如果不指定路径，那么就意味着每一个请求都会触发这个中间件。")]),e._v(" "),r("p",[r("strong",[e._v("关于next(route)")])]),e._v(" "),r("p",[e._v("跳过当前路由分组中的剩余路由")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("var stack = [\n  {path: '/user/:id', fns: [fn1, fn2, fn3], // 路由组1\n  {path: '/user/:id', fns: [fn4, fn5, fn5] // 路由组2\n]\n")])])]),r("p",[e._v("如果没有next('route')，一路next()调用下去的话，调用顺序是这样的：\nfn1 -> fn2 -> fn3 -> fn4 -> fn5 -> fn6；\n调用next('route')然后就变成了 fn1 -> fn4 -> fn5 -> fn6")]),e._v(" "),r("h2",{attrs:{id:"自己写一个中间件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自己写一个中间件"}},[e._v("#")]),e._v(" 自己写一个中间件")]),e._v(" "),r("p",[e._v("首先需要明确的是中间件是一个函数模块，如果在这个中间中没有想结束整个response-request cycle，那么就需要执行next()方法，将控制权交给后面的中间件。\n常见的结束循环的方法，res.send/render/json。")]),e._v(" "),r("p",[e._v("下面这个中间件来自项目中的需求，")]),e._v(" "),r("p",[e._v("**背景：**在网页访问这个页面，而且在页面渲染之前需要判断某个活动的类型，对应前端返回不同的页面组件")]),e._v(" "),r("p",[e._v("**方案：**在server层获取路径，拿到活动id调用接口判断类型，做路径处理")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const app_config = require('../config')()\nconst http = require('https');\nconst url = require('url');\nfunction getStudioType(studioId) {\n  let url = app_config.runtime.api.host + `/web/studios/${studioId}`;\n  let data = '';\n  return new Promise((resolve, reject) => {\n    http.get(url, function (res) {\n      res.setEncoding('utf8');  \n      res.on(\"data\", (chunk) => {\n        data += chunk;\n      }).on(\"end\", () => {\n        resolve(JSON.parse(data));\n        })\n      }).on(\"error\", (e) => {\n        reject(e)\n    }).end()\n  });\n}\n\nmodule.exports = function(req, res, next) {\n  let reqPath = url.parse(req.url);\n  if (reqPath.pathname.search(/studio/) > -1) {\n    let studioId = reqPath.pathname.slice(reqPath.pathname.lastIndexOf('/')+1);\n    getStudioType(studioId).then((httpRes) => {\n      if (httpRes.platform === 1) { // pc端的活动，手机模式不进行适配\n        req.url = req.url + `?paltform_type=pc`;\n      }\n      next();\n    }).catch((err) => {\n      console.log(err);\n    });\n  } else {\n    next()\n  }\n}\n")])])]),r("p",[e._v("server层使用")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("app.use(require('./define_active_type'))\napp.use(require('./head_server'))\n")])])]),r("h2",{attrs:{id:"express中间件原理分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#express中间件原理分析"}},[e._v("#")]),e._v(" express中间件原理分析")]),e._v(" "),r("p",[e._v("中间件的注册方式是使用app.use(some middleware)，如果要执行下一个中间件就使next()\n因此我们的重点是研究app.use()，和next()")]),e._v(" "),r("p",[e._v("源码文件：express/lib/application.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("app.use = function use(fn) {\n  var offset = 0;\n  var path = '/';\n\n  // default path to '/'\n  // disambiguate app.use([fn])\n  if (typeof fn !== 'function') { // 判断第一个参数是否是函数如果不是\n    var arg = fn;\n\n    while (Array.isArray(arg) && arg.length !== 0) { // 如果是一个数组的话，只取值数组中的第一个值\n      arg = arg[0];\n    }\n\n    // first arg is the path\n    if (typeof arg !== 'function') { // 如果不是函数，将offset偏移一位\n      offset = 1;\n      path = fn;\n    }\n  }\n\n  var fns = flatten(slice.call(arguments, offset)); // 获取所有的回调函数,形成一个数组\n\n  if (fns.length === 0) {\n    throw new TypeError('app.use() requires a middleware function')\n  }\n\n  // setup router\n  this.lazyrouter();      // 初始化router\n  var router = this._router;\n\n  fns.forEach(function (fn) { // 遍历这个数组，将path与函数对应起来可能会有多个回调函数，但是对应的路径是唯一的）\n    // non-express app\n    if (!fn || !fn.handle || !fn.set) {\n      return router.use(path, fn);  // 使用router.use进行存储对应关系\n    }\n\n    debug('.use app under %s', path);\n    fn.mountpath = path;\n    fn.parent = this;\n\n    // restore .app property on req and res\n    router.use(path, function mounted_app(req, res, next) {\n      var orig = req.app;\n      fn.handle(req, res, function (err) {\n        setPrototypeOf(req, orig.request)\n        setPrototypeOf(res, orig.response)\n        next(err);\n      });\n    });\n\n    // mounted an app\n    fn.emit('mount', this);\n  }, this);\n\n  return this;\n};\n")])])]),r("p",[e._v("查看this._router的定义")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("app.lazyrouter = function lazyrouter() {\n  if (!this._router) {\n    this._router = new Router({ // 使用Router进行实例化\n      caseSensitive: this.enabled('case sensitive routing'),\n      strict: this.enabled('strict routing')\n    });\n\n    this._router.use(query(this.get('query parser fn')));\n    this._router.use(middleware.init(this));\n  }\n};\n")])])]),r("p",[e._v("Router的源码 express/lib/router/index.js")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("proto.use = function use(fn) {\n  var offset = 0;\n  var path = '/';\n\n  // default path to '/'\n  // disambiguate router.use([fn])\n  if (typeof fn !== 'function') {\n    var arg = fn;\n\n    while (Array.isArray(arg) && arg.length !== 0) {\n      arg = arg[0];\n    }\n\n    // first arg is the path\n    if (typeof arg !== 'function') {\n      offset = 1;\n      path = fn;\n    }\n  }\n\n  var callbacks = flatten(slice.call(arguments, offset));\n\n  if (callbacks.length === 0) {\n    throw new TypeError('Router.use() requires a middleware function')\n  }\n\n  // 前面的逻辑同app.use相同，这里不做分析\n  for (var i = 0; i < callbacks.length; i++) {\n    var fn = callbacks[i];\n\n    if (typeof fn !== 'function') {\n      throw new TypeError('Router.use() requires a middleware function but got a ' + gettype(fn))\n    }\n\n    // add the middleware\n    debug('use %o %s', path, fn.name || '<anonymous>')\n\n    var layer = new Layer(path, {  // 将fn回调函数以及path的对应关系生成一个Layer，然后存储在this.stack中，stack就是一个数组\n      sensitive: this.caseSensitive,\n      strict: false,\n      end: false\n    }, fn);\n\n    layer.route = undefined;\n\n    this.stack.push(layer); // 将中间件存储在stack数组中\n  }\n\n  return this;\n};\n")])])]),r("p",[e._v("所以一句话总结就是express中是先将中间件与路径生成一个layer，然后以数组的形式将中间件函数存储在一个自定义的stack数组中，next方法就是执行\nstack中下一个中间件，通过下标加一的方法。")]),e._v(" "),r("p",[e._v("express()实例app的next()方法定义在 “express/lib/router/index.js”中的handle方法中")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function next(err) {\n    var layerError = err === 'route'\n      ? null\n      : err;\n\n    // remove added slash\n    if (slashAdded) { // 如果包含‘/’\n      req.url = req.url.substr(1);\n      slashAdded = false;\n    }\n\n    // restore altered req.url\n    if (removed.length !== 0) {\n      req.baseUrl = parentUrl;\n      req.url = protohost + removed + req.url.substr(protohost.length);\n      removed = '';\n    }\n\n    // signal to exit router\n    if (layerError === 'router') {\n      setImmediate(done, null)\n      return\n    }\n\n    // no more matching layers\n    if (idx >= stack.length) {\n      setImmediate(done, layerError);\n      return;\n    }\n\n    // get pathname of request\n    var path = getPathname(req);\n\n    if (path == null) {\n      return done(layerError);\n    }\n\n    // find next matching layer\n    var layer;\n    var match;\n    var route;\n\n    while (match !== true && idx < stack.length) { // 这里会去循环整个stack数组\n      layer = stack[idx++];\n      match = matchLayer(layer, path);  // path，与layer的对应匹配，如果匹配上了就设置为true\n      route = layer.route;\n\n      if (typeof match !== 'boolean') {\n        // hold on to layerError\n        layerError = layerError || match;\n      }\n\n      if (match !== true) {\n        continue;\n      }\n\n      if (!route) {\n        // process non-route handlers normally\n        continue;\n      }\n\n      if (layerError) {\n        // routes do not match with a pending error\n        match = false;\n        continue;\n      }\n\n      var method = req.method;\n      var has_method = route._handles_method(method);\n\n      // build up automatic options response\n      if (!has_method && method === 'OPTIONS') {\n        appendMethods(options, route._options());\n      }\n\n      // don't even bother matching route\n      if (!has_method && method !== 'HEAD') {\n        match = false;\n        continue;\n      }\n    }\n\n    // no match\n    if (match !== true) {\n      return done(layerError);\n    }\n\n    // store route for dispatch on change\n    if (route) {\n      req.route = route;\n    }\n\n    // Capture one-time layer values\n    req.params = self.mergeParams\n      ? mergeParams(layer.params, parentParams)\n      : layer.params;\n    var layerPath = layer.path;\n\n    // this should be done for the layer\n    self.process_params(layer, paramcalled, req, res, function (err) {\n      if (err) {\n        return next(layerError || err);\n      }\n\n      if (route) {\n        return layer.handle_request(req, res, next); // 通过handle_request执行这个中间件\n      }\n\n      trim_prefix(layer, layerError, layerPath, path);\n    });\n  }\n")])])]),r("p",[e._v("handle_request")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Layer.prototype.handle_request = function handle(req, res, next) {\n  var fn = this.handle;\n\n  if (fn.length > 3) {\n    // not a standard request handler\n    return next();\n  }\n\n  try {\n    fn(req, res, next);\n  } catch (err) {\n    next(err);\n  }\n};\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);