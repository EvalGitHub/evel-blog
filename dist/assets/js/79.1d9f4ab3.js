(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{530:function(n,e,t){"use strict";t.r(e);var s=t(28),a=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"react中优雅抽离公共逻辑的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react中优雅抽离公共逻辑的方式"}},[n._v("#")]),n._v(" react中优雅抽离公共逻辑的方式")]),n._v(" "),t("h2",{attrs:{id:"自定义hook"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义hook"}},[n._v("#")]),n._v(" 自定义hook")]),n._v(" "),t("blockquote",[t("p",[n._v("hook是react16.8的新增特性，可以让我们在不编写class的情况下使用state以及其他的react特性")])]),n._v(" "),t("p",[n._v("聊天程序中的组件，该组件用于显示好友的在线状态：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import React, { useState, useEffect } from 'react';\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n")])])]),t("p",[n._v("当用户在线时需要把名字设置为绿色:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import React, { useState, useEffect } from 'react';\n\nfunction FriendListItem(props) {\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n  return (\n    <li style={{ color: isOnline ? 'green' : 'black' }}>\n      {props.friend.name}\n    </li>\n  );\n}\n")])])]),t("p",[n._v("存在的问题是两个功能代码中存在相同逻辑，这个时候我们可以自定义hook的形式抽离公共逻辑")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import React, { useState, useEffect } from 'react';\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n    };\n  });\n  return isOnline;\n}\n\n// 组件\nfunction FriendStatus(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n\n// 组件\nfunction FriendListItem(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n  return (\n    <li style={{ color: isOnline ? 'green' : 'black' }}>\n      {props.friend.name}\n    </li>\n  );\n}\n")])])]),t("p",[t("strong",[n._v("几点说明：")])]),n._v(" "),t("ul",[t("li",[n._v("自定义 Hook 必须以 “use” 开头；react可以以此判断这个函数内部包含了hook的调用，检查你的 Hook 是否违反了 Hook 的规则。")]),n._v(" "),t("li",[n._v("两个组件使用的相同的hook不会公用state，其中的所有 state 和副作用都是完全隔离的【一个组件中多次调用 useState 和 useEffect，它们是完全独立的】。")])]),n._v(" "),t("h2",{attrs:{id:"render-props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#render-props"}},[n._v("#")]),n._v(" render props")]),n._v(" "),t("blockquote",[t("p",[n._v("术语 “render prop” 是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术；render prop 的组件接受一个函数，该函数返回一个 React 元素并调用它而不是实现自己的渲染逻辑。")])]),n._v(" "),t("p",[t("strong",[n._v("例如：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<DataProvider render={data => (\n  <h1>Hello {data.target}</h1>\n)}/>\n")])])]),t("p",[t("strong",[n._v("借用一个官方的例子:实现一张图片跟随鼠标移动")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Cat extends React.Component {\n  render() {\n    const mouse = this.props.mouse;\n    return (\n      <img src=\"/cat.jpg\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }}/>\n    );\n  }\n}\n\nclass MouseMove extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = { x: 0, y: 0 };\n  }\n  handleMouseMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n  render() {\n    return (\n      <div style={{ height: '100%' }} onMouseMove={this.handleMouseMove}>\n        <Cat mouse={this.state} />\n      </div>\n    );\n  }\n}\n")])])]),t("p",[n._v("以上是我们一种很常见的书写组件的方式，通过props的方式传递一些必要参数。但是这个并不能实现代码的复用，我们明显的发现上面的代码中获取鼠标的移动坐标是一个很常见的需求，上面例子中")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<Cat mouse={this.state}/>\n")])])]),t("p",[n._v("是硬编码到MouseMove组件中的，我们需要动态的进行组件渲染而不是这种固定组件的形式。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class MouseMove extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = { x: 0, y: 0 };\n  }\n  handleMouseMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n  render() {\n    return (\n      <div style={{ height: '100%' }} onMouseMove={this.handleMouseMove}>\n        {this.props.render(this.state)}\n      </div>\n    );\n  }\n}\n\nclass MouseTracker extends React.Component {\n  render() {\n    return (\n      <MouseMove render={pos => (<Cat mouse={pos}/>)}/>\n    )\n  }\n}\n")])])]),t("p",[n._v("上述代码通过props，传入了一个函数形式返回一个cat组件，这样就很好地实现了动态渲染组件的功能，在某一种角度上复用了MouseMove组件。")]),n._v(" "),t("h2",{attrs:{id:"高阶组件hoc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件hoc"}},[n._v("#")]),n._v(" 高阶组件HOC")]),n._v(" "),t("blockquote",[t("p",[n._v("高阶组件是react中复用组件逻辑的一种高级技巧")])]),n._v(" "),t("p",[t("strong",[n._v("高阶组件是参数为组件，返回值为新组件的函数")])]),n._v(" "),t("p",[n._v("形式：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function createComponent (TargetComponent, propsDate) {\n    return class extends React.Component {\n        /** \n        **此处省略组件的公用逻辑代码\n        **\n        ***********\n        **/\n        render () {\n            return <TargetComponent >\n        }\n    }\n}\n")])])]),t("p",[n._v("借用官网的一个例子：有两个组件CommentList ， BlogPost")]),n._v(" "),t("p",[n._v("CommentList .js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('class CommentList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      // 假设 "DataSource" 是个全局范围内的数据源变量\n      comments: DataSource.getComments()\n    };\n  }\n  componentDidMount() {\n    // 订阅更改\n    DataSource.addChangeListener(this.handleChange);\n  }\n  componentWillUnmount() {\n    // 清除订阅\n    DataSource.removeChangeListener(this.handleChange);\n  }\n  handleChange() {\n    // 当数据源更新时，更新组件状态\n    this.setState({\n      comments: DataSource.getComments()\n    });\n  }\n  render() {\n    return (\n      <div>\n        {this.state.comments.map((comment) => (\n          <Comment comment={comment} key={comment.id} />\n        ))}\n      </div>\n    );\n  }\n}\n')])])]),t("p",[n._v("BlogPost.js")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class BlogPost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      blogPost: DataSource.getBlogPost(props.id)\n    };\n  }\n  componentDidMount() {\n    DataSource.addChangeListener(this.handleChange);\n  }\n  componentWillUnmount() {\n    DataSource.removeChangeListener(this.handleChange);\n  }\n  handleChange() {\n    this.setState({\n      blogPost: DataSource.getBlogPost(this.props.id)\n    });\n  }\n  render() {\n    return <TextBlock text={this.state.blogPost} />;\n  }\n}\n")])])]),t("p",[n._v("分析以上两个组件我们可以很清楚的看到，他们的 数据处理逻辑完全一样， 只是render函数中的渲染不同，因此可以做出优化。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 此函数接收一个组件...\nfunction withSubscription(WrappedComponent, selectData) {\n  // ...并返回另一个组件...\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {\n        data: selectData(DataSource, props)\n      };\n    }\n    componentDidMount() {\n      // ...负责订阅相关的操作...\n      DataSource.addChangeListener(this.handleChange);\n    }\n    componentWillUnmount() {\n      DataSource.removeChangeListener(this.handleChange);\n    }\n    handleChange() {\n      this.setState({\n        data: selectData(DataSource, this.props)\n      });\n    }\n    render() {\n      // ... 并使用新数据渲染被包装的组件!\n      // 请注意，我们可能还会传递其他属性\n      return <WrappedComponent data={this.state.data} {...this.props} />;\n    }\n  };\n}\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);