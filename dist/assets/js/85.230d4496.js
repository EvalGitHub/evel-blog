(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{539:function(t,e,r){"use strict";r.r(e);var a=r(28),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"redux与react-redux的使用实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux与react-redux的使用实践"}},[t._v("#")]),t._v(" redux与react-redux的使用实践")]),t._v(" "),r("p",[t._v("redix是有个状态管理工具库，可以用于很多框架(vue，angular，jquery)，不只是服务于react，但是为了在react中使用更加方便，因此推荐使用react-redux + redux")]),t._v(" "),r("h2",{attrs:{id:"redux设计的原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux设计的原则"}},[t._v("#")]),t._v(" redux设计的原则")]),t._v(" "),r("h3",{attrs:{id:"单一数据原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单一数据原则"}},[t._v("#")]),t._v(" 单一数据原则")]),t._v(" "),r("p",[t._v("整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中")]),t._v(" "),r("blockquote",[r("p",[t._v("控制数据涞源，便于数据维护")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("console.log(store.getState())\n")])])]),r("h3",{attrs:{id:"state是只读的-只能通过action来修改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#state是只读的-只能通过action来修改"}},[t._v("#")]),t._v(" state是只读的，只能通过action来修改")]),t._v(" "),r("p",[t._v("唯一改变 state 的方法就是触发(dispatch)一个 action去修改state，action 是一个用于描述已发生事件的普通对象，每一次都返回一个新的state")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("store.dispatch({\n  type: 'COMPLETE_TODO', // 表示动作\n  index: 1\t// 参数\n})\nstore.dispatch({\n  type: 'SET_VISIBILITY_FILTER',\n  filter: 'SHOW_COMPLETED'\n})\n")])])]),r("blockquote",[r("p",[t._v("约定修改state的方式只能是action，便于问题追踪")])]),t._v(" "),r("h3",{attrs:{id:"使用纯函数来执行修改state"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用纯函数来执行修改state"}},[t._v("#")]),t._v(" 使用纯函数来执行修改state")]),t._v(" "),r("p",[t._v("为了描述 action 如何改变 state tree ，你需要编写 reducers，并且他必须是纯函数")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function visibilityFilter(state = 'SHOW_ALL', action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return { ...action.filter }\n    default:\n      return state\n  }\n};\nimport { combineReducers } from 'redux';\nlet reducer = combineReducers({ visibilityFilter });\n")])])]),r("blockquote",[r("p",[t._v("使用纯函数保证相同的输入得到相同的输出，保证状态的可预测性。")])]),t._v(" "),r("h3",{attrs:{id:"如果有修改就返回一个新的对象-否则就返回初始化state"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如果有修改就返回一个新的对象-否则就返回初始化state"}},[t._v("#")]),t._v(" 如果有修改就返回一个新的对象，否则就返回初始化state")]),t._v(" "),r("p",[t._v("因为redux在进行状态对比时候只是一个浅比较（key, value的比较）, 如果redux发现返回的值没变则返回原来的state")]),t._v(" "),r("p",[r("strong",[t._v("项目中实际运用：")])]),t._v(" "),r("p",[r("strong",[t._v("redux/actions")]),t._v("：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('import { ADDNAME,ADDAGE } from "./actionType";\nexport const addNameCreater = (name:string) => {\n  return {type:ADDNAME,data:name}\n};\nexport const addAgeCreater = (age:number) => ({type:ADDAGE,data:age});\n')])])]),r("p",[r("strong",[t._v("redux/actionType")]),t._v("：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("export const ADDNAME = 'ADDNAME';\nexport const ADDAGE = 'ADDAGE';\n")])])]),r("p",[r("strong",[t._v("redux/reducer")]),t._v("：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import * as ActionTypes from './actionType';\nimport { combineReducers } from 'redux';\nfunction addName (state:any = {\n  name: 'tom'\n}, action:any) {\n  switch (action.type) {\n    case 'ADDNAME': \n      return action.data\n    default: \n      return state\n  }\n}\nfunction addAge (state:any = {\n  age: 12\n}, action:any) {\n  switch (action.type) {\n    case 'ADDAGE': \n      return action.data\n    default: \n      return state\n  }\n} \nexport const funReducer = combineReducers({\n  addName, addAge\n})\n")])])]),r("p",[r("strong",[t._v("redux/store")]),t._v("：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import { createStore } from 'redux';\nimport { funReducer } from './reducer';\nconst store = createStore(funReducer);\nexport default store;\n")])])]),r("p",[r("strong",[t._v("通过store.dispatch(action)触发一个动作修改state")])]),t._v(" "),r("p",[t._v("em：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import {addAgeCreater, addNameCreater } from './actions';\nstore.dispatch(addAgeCreater('Tom'))\nstore.getState() // 获得最新的state值\n")])])]),r("p",[r("strong",[t._v("subscribe(listener)监听state的变化")])]),t._v(" "),r("p",[t._v("每当dispatch action的时候都会执行subscribe; 保证所有的监听器都注册在 "),r("a",{attrs:{href:"http://cn.redux.js.org/docs/api/Store.html#dispatch",target:"_blank",rel:"noopener noreferrer"}},[r("code",[t._v("dispatch()")]),r("OutboundLink")],1),t._v(" 启动之前，这样，在调用监听器的时候就会传入监听器所存在时间里最新的一次 state。")]),t._v(" "),r("h2",{attrs:{id:"使用react-redux将react与redux完美结合起来"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用react-redux将react与redux完美结合起来"}},[t._v("#")]),t._v(" 使用react-redux将react与redux完美结合起来")]),t._v(" "),r("p",[t._v("从上面的简单的例子中我们不难看到，如果只是单纯在react项目中使用redux进行数据操作的时候会有诸多不便，例如如何在组件中优雅的获取redux中的state了？以及如何将这变化同步到视图呢？")]),t._v(" "),r("p",[t._v("这个时候我们需要一个辅助工具"),r("a",{attrs:{href:"https://react-redux.js.org/introduction/quick-start",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-redux"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("provider 接受redux的store，处于整个redux应用的顶层")]),t._v(" "),r("li",[t._v("connect 提供整个react应用的任意组件中获取store的数据能力")])]),t._v(" "),r("h3",{attrs:{id:"关于provider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于provider"}},[t._v("#")]),t._v(" 关于provider")]),t._v(" "),r("p",[t._v("一般用于入口组件处，进行包裹")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n")])])]),r("p",[t._v("这样就能在每个组件中使用connect将你的组件积习进行connected")]),t._v(" "),r("h3",{attrs:{id:"关于connect"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于connect"}},[t._v("#")]),t._v(" 关于connect")]),t._v(" "),r("p",[t._v("将react组件与redux的store联系起来，它会返回一个新的被包裹的组件。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function connect(mapStateToProps?, mapDispatchToProps?, mergeProps?, options?)\n")])])]),r("p",[t._v("connect的参数：")]),t._v(" "),r("ol",[r("li",[t._v("mapStateProps(state, ownProps?) => Object")])]),t._v(" "),r("p",[t._v("redux的store的更新都会触发这个方法，返回一个空对象；这个对象将会合并到组件自己的props中，因此可以直接通过this.props[store中的state名字]访问store的中属性。")]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("mapDispatchToProps?:Object | (dispatch, ownProps?) => Object")])]),t._v(" "),r("p",[t._v("在redux中使用store.dispatch来触发一个action去修改state，如果使用了react-redux的mapDispatchToProps，就可以通过props直接访问这个dispatch方法了。")]),t._v(" "),r("p",[r("strong",[t._v("使用方式：")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class SomeComponent extends React.Component<InitState, InitProps> {\n  constructor(props:InitProps) {\n    super(props)\n  }\n  render () {\n    <div onClick={this.props.onCreament2.bind(this)}>\n      <p>{this.props.productionList}</p>\n    </div>\n  }\n}\n\nconst mapDispatchToProps = (dispath) => {\n  return {\n    onCreament2: () => {\n      dispath({...Action.decrease(), preload: {quantity:3}})\n    }\n  }\n}\n\nconst mapStateToProps = (store) => {\n  return {\n    productionList: store.changeDataReducer,\n    bookList: store.BookReducer\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SomeComponent);\n")])])]),r("p",[t._v("示例代码：\n"),r("a",{attrs:{href:"https://github.com/Arrayeval/react_pro/blob/master/src/base/reduxUse2.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/Arrayeval/react_pro/blob/master/src/base/reduxUse2.js"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/naihe138/react-plan",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章1"),r("OutboundLink")],1),t._v("，\n"),r("a",{attrs:{href:"https://www.jianshu.com/p/f6c5434c6e2d",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章2"),r("OutboundLink")],1),t._v("，\n"),r("a",{attrs:{href:"https://www.jianshu.com/p/ad7eddb23d66",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章3"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);