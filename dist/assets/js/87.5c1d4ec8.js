(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{540:function(r,a,e){"use strict";e.r(a);var t=e(28),n=Object(t.a)({},(function(){var r=this,a=r.$createElement,e=r._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"关于errorboundary的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于errorboundary的使用"}},[r._v("#")]),r._v(" 关于errorboundary的使用")]),r._v(" "),e("p",[r._v("在react16中，任何未被错误边界捕获的错误将会导致整个 React 组件树被卸载。")]),r._v(" "),e("h2",{attrs:{id:"使用errorboundary的原因"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用errorboundary的原因"}},[r._v("#")]),r._v(" 使用errorboundary的原因")]),r._v(" "),e("p",[r._v("以react为框架的项目开发中如果遇到一些没被处理的javascript错误，会导致整个应用崩溃，为了更好的用户体验，优雅的处理错误的方式，errorBoundary由此而生，他会在错误发生的时候不去渲染那些错误的组件，而去渲染开发者提供的备用组件。")]),r._v(" "),e("h2",{attrs:{id:"errboundary也不是万能的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#errboundary也不是万能的"}},[r._v("#")]),r._v(" errboundary也不是万能的")]),r._v(" "),e("p",[r._v("errorBoundary也不是能够处理所有的异常错误")]),r._v(" "),e("ul",[e("li",[r._v("不能捕获非子组件的错误")]),r._v(" "),e("li",[r._v("不能捕获异步，setTimeout/setInterval中的错误")]),r._v(" "),e("li",[r._v("不能捕获事件处理中的错误")])]),r._v(" "),e("p",[r._v("对于以上不能被处理的错误方式，只能通过其他的方式去处理")]),r._v(" "),e("p",[r._v("try....catch，window.onerror")]),r._v(" "),e("h2",{attrs:{id:"errboundary的错误捕获"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#errboundary的错误捕获"}},[r._v("#")]),r._v(" errboundary的错误捕获")]),r._v(" "),e("p",[r._v("一般会封装一个简单的ErrorBoundary组件去包裹需要进行处理的组件；如果子组件中出现了错误，我们可以在Errorboundary组件的“getDerivedStateFromError”，或者“componentDidCatch”中捕获到错误，我们可以针对于个人的需要封装多种errorboundar组件来应对需要。")]),r._v(" "),e("h2",{attrs:{id:"errboundary的使用方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#errboundary的使用方式"}},[r._v("#")]),r._v(" errboundary的使用方式")]),r._v(" "),e("p",[r._v("封装一个简单的Errorboundary组件")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v('interface InitProps {}\ninterface InitState {}\nexport class ErrorBoundary extends React.Component<InitProps, InitState> {\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch(error: Error, info: any) {\n    this.setState({\n      hasError: true\n    });\n  }\n  \n  render() {\n    if (this.state.hasError) {\n      return <h1 className="error_wrapper">there is something error</h1>;\n    }\n    return this.props.children;\n  }\n}\n')])])]),e("p",[r._v("然后可以使用ErrorBoundary包裹你要进行处理的组件")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v('import { Detail } from "./container/detail/index";\nimport { ErrorBoundary } from "./component/errorBoundary";\nfunction App() {\n  return (\n    <div className="App">\n      <h1>ErrorBoundary</h1>\n      <ErrorBoundary>\n        <Detail />\n      </ErrorBoundary>\n    </div>\n  );\n}\n')])])]),e("p",[e("a",{attrs:{href:"https://codesandbox.io/s/react-error-boundary-2zee4",target:"_blank",rel:"noopener noreferrer"}},[r._v("errorboundary的简单使用"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);