(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{538:function(t,e,a){"use strict";a.r(e);var r=a(28),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-saga的使用实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-saga的使用实践"}},[t._v("#")]),t._v(" react-saga的使用实践")]),t._v(" "),a("p",[t._v("在react项目开发中，如果涉及到很多的状态维护工作，比较合适的处理方式就是使用react-redux + redux来进行处理，但是我们知道的是redux的设计的大原则其中之一就是"),a("strong",[t._v("修改state的必须是纯函数")]),t._v("；这就意味着对于异步请求(副作用)的状态维护我们需要另一种合适的方案 -- react-saga。")]),t._v(" "),a("p",[a("strong",[t._v("纯函数的定义：")])]),t._v(" "),a("p",[t._v("相同的输入得到相同的输出，无任何副作用。")]),t._v(" "),a("h2",{attrs:{id:"为什么需要redux-saga"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要redux-saga"}},[t._v("#")]),t._v(" 为什么需要redux-saga？")]),t._v(" "),a("p",[t._v("redux的设计原则之一使用纯函数修改state，其目的就是为了保证状态的可以预测性。")]),t._v(" "),a("h2",{attrs:{id:"redux-saga的常用api注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-saga的常用api注解"}},[t._v("#")]),t._v(" redux-saga的常用api注解")]),t._v(" "),a("blockquote",[a("p",[t._v("take，call，put，select，fork，takeEvery，takeLatest")])]),t._v(" "),a("ul",[a("li",[t._v("take用来监听action，返回的是一个对象")])]),t._v(" "),a("p",[t._v("em:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("dispatch({type: 'CHANGE_NAME', value: XXX})\n\nfunction *watchName() {\n  const acton = yield ('CHANGE_NAME');\n  ...\n  ...\n}\n")])])]),a("p",[t._v("action就是{type:XXX, value:XXX}")]),t._v(" "),a("ul",[a("li",[t._v("call(apply)")])]),t._v(" "),a("blockquote",[a("p",[t._v("call(fn, ...args);")])]),t._v(" "),a("p",[t._v("call和apply方法与js中的call和applay相似，在redux-saga中使用异步请求等常用call方法来实现。")]),t._v(" "),a("blockquote",[a("p",[t._v("yield call(fetch,'/userInfo',username)")])]),t._v(" "),a("p",[t._v("在call方法调用结束之前，call方法之后的语句是无法执行的，这是一种阻塞型的方法。")]),t._v(" "),a("ul",[a("li",[t._v("put")])]),t._v(" "),a("p",[t._v("redux-saga执行完副作用函数后，必须发出action，然后这个action被reducer监听，从而达到更新state的目的。相应的这里的put对应与redux中的dispatch。")]),t._v(" "),a("blockquote",[a("p",[t._v("yield put({type:'login'})")])]),t._v(" "),a("ul",[a("li",[t._v("select")])]),t._v(" "),a("p",[t._v("如果想在中间件中获取state，就可以使用，对应redux的getState")]),t._v(" "),a("blockquote",[a("p",[t._v("const id = yield select(state => state.id);")])]),t._v(" "),a("ul",[a("li",[t._v("fork")])]),t._v(" "),a("p",[t._v("非阻塞调用，执行fn时，不会暂停Generator")]),t._v(" "),a("blockquote",[a("p",[t._v("yield fork(getList)")])]),t._v(" "),a("ul",[a("li",[t._v("takeEvery/takeLatest")])]),t._v(" "),a("p",[t._v("takeEvery和takeLatest用于监听相应的动作并执行相应的方法。")]),t._v(" "),a("blockquote",[a("p",[t._v("takeEvery('login',loginFunc)")])]),t._v(" "),a("p",[t._v("takeEvery可以同时监听到多个相同的action。")]),t._v(" "),a("blockquote",[a("p",[t._v("takeLatest('login',loginFunc)")])]),t._v(" "),a("p",[t._v("takeLatest是会监听执行最近的那个被触发的action。")]),t._v(" "),a("h2",{attrs:{id:"redux与redux-saga的使用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux与redux-saga的使用实例"}},[t._v("#")]),t._v(" redux与redux-saga的使用实例")]),t._v(" "),a("p",[t._v('在正常使用react-redux与reduxd搭建起之后，需要使用redux的中间件插件"applyMiddleware"')]),t._v(" "),a("p",[a("strong",[t._v("因此你的store.js文件是这样的：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import {createStore, applyMiddleware} from 'redux'\nimport createSagaMiddleware  from 'redux-saga'\nimport Reducers from './reducers'\nimport rootSaga from '../saga';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(Reducers,applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga); // 执行所有的saga\n\nexport default store\n")])])]),a("p",[a("strong",[t._v("actionType.js的文件是这样的：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("export const GET_ERROR = 'getError'\nexport const ARTICLE_FETCH_REQUEST = 'getArticleList'\nexport const GET_ARTICLE_LIST_SUCC = 'getArticListSucc'\nexport const GET_ARTICLE_LIST_FAIL = 'getArticListFail'\n")])])]),a("p",[a("strong",[t._v("saga/index.js文件是这样的：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import {call, put, takeEvery, takeLatest} from 'redux-saga/effects'\nimport article from '../service/article/index';\n\nimport { ARTICLE_FETCH_REQUEST, GET_ARTICLE_LIST_SUCC, GET_ARTICLE_LIST_FAIL } from '../redux/actionType'\nimport {get_errors, get_users} from '../redux/action'\n\nfunction* getArticleList(obj) {\n  try {\n    const articleListData = yield call(article.getArticleList, {...obj.preload});\n    yield put({\n      type: GET_ARTICLE_LIST_SUCC,\n      preload: articleListData\n    });\n  } catch(e) {\n    yield put({\n      type: GET_ARTICLE_LIST_FAIL,\n      message: e.message\n    });\n  }\n}\n \n// wacther saga\nfunction* watchGetPosts() {\n  yield takeEvery(ARTICLE_FETCH_REQUEST, getArticleList);\n}\n\n// root saga\nexport default function* rootSaga() {\n  yield watchGetPosts()\n} \n")])])]),a("p",[t._v("分析下以上代码的数据走向：")]),t._v(" "),a("ol",[a("li",[t._v("首先export rootSaga，在store中通过sagaMiddleware.run(rootSaga)启动了所有的监听")]),t._v(" "),a("li",[t._v("在watchGetPosts中又监听了“ARTICLE_FETCH_REQUEST”这个action，一旦触发就执行 getArticleList方法")]),t._v(" "),a("li",[t._v('getArticleList中通过call去发起异步请求，成功就put一个名为"GET_ARTICLE_LIST_SUCC"的action，参数为请求成功返回的结果\n失败就put一个名为“GET_ARTICLE_LIST_FAIL”的action，参数为message')]),t._v(" "),a("li",[t._v("通过匹配action返回新state的操作在reducer中执行")])]),t._v(" "),a("p",[a("strong",[t._v("对应的reducer：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import * as ActionTypes from './actionType'\nimport {errorInfo} from './data.js'\nconst initialState = {\n  ...errorInfo\n}\n\nexport const fetchInfoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.GET_ARTICLE_LIST_FAIL: \n      return {\n        status: 400,\n        msg: '获取文章列表失败'\n      }  \n    case ActionTypes.GET_ARTICLE_LIST_SUCC: \n      return {\n        status: 200,\n        msg: '获取文章列表成功succ'\n      }  \n    default:\n      return state\n  }\n}\n")])])]),a("p",[t._v("上面的实例代码实现了部分数据流，还差一个启动“ARTICLE_FETCH_REQUEST” 的操作\n在实际的运用场景下，可以通过点击一个按钮去触发拉取数据请求。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<li  className=\"redux-li-item\"> \n  <button className=\"btn btn-redux\" onClick={getArticleList}>测试下redux-saga</button>\n  <p>\n    {JSON.stringify(this.props.errorInfo)}\n  </p>\n</li>\n\n...\n......\n.......\n\nconst mapStateToProps = function(store) {\n  return {\n    productList: store.changeDataReducer,\n    bookList: store.BookReducer,\n    errorInfo: store.fetchInfoReducer\n  };\n};\n\n// 通过mapDispatchProps\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onDecrement2: () => {\n      dispatch({...Action.decrease(),  preload: {quantity:3}})\n    },\n    getArticleList: () => {\n      dispatch({type: 'getArticleList', preload: {type: '', pageStart: 0}})\n    }\n  }\n};\n")])])]),a("p",[t._v("https://github.com/Arrayeval/react_pro/blob/master/src/base/reduxUse2.js")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000015583055#item-5",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻彻底底教会你使用Redux-saga(包含样例代码)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);