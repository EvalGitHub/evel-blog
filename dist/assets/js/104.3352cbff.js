(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{563:function(v,_,t){"use strict";t.r(_);var e=t(28),l=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"前端工程化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端工程化"}},[v._v("#")]),v._v(" 前端工程化")]),v._v(" "),t("p",[v._v("前端工程化是使用软件工程技术和方法来进行前端的开发流程，技术，工具，经验等规范化，标准化；\n其目的是为了提供效率降低成本。")]),v._v(" "),t("p",[t("strong",[v._v("模块化，组件化，规范化，自动化")])]),v._v(" "),t("h2",{attrs:{id:"模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[v._v("#")]),v._v(" 模块化")]),v._v(" "),t("blockquote",[t("p",[v._v("将大文件拆分为互相依赖的小文件，在进行加载")])]),v._v(" "),t("ul",[t("li",[v._v("JS的模块化")])]),v._v(" "),t("p",[v._v("AMD，CMD，Esmodule，commonjs")]),v._v(" "),t("p",[v._v("AMD -> requireJS")]),v._v(" "),t("p",[v._v("CMD -> sea.js")]),v._v(" "),t("p",[v._v("esmodule -> import/export")]),v._v(" "),t("p",[v._v("commonJs -> node(module.export/exports)")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/evaling/p/10341112.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("js的模块化规范"),t("OutboundLink")],1)]),v._v(" "),t("ul",[t("li",[v._v("css的模块化")])]),v._v(" "),t("p",[v._v("虽然SASS、LESS、Stylus等预处理器实现了CSS的文件拆分，但没有解决CSS模块化的一个重要问题：选择器的全局污染问题。")]),v._v(" "),t("p",[v._v("社区又创造出Shadow DOM、CSS in JS和CSS Modules三种解决方案。")]),v._v(" "),t("blockquote",[t("p",[v._v("Shadow DOM是WebComponents的标准。它能解决全局污染问题，但目前很多浏览器不兼容，对我们来说还很久远；")])]),v._v(" "),t("blockquote",[t("p",[v._v("CSS in JS是彻底抛弃CSS，使用JS或JSON来写样式。这种方法很激进，不能利用现有的CSS技术，而且处理伪类等问题比较困难.")])]),v._v(" "),t("blockquote",[t("p",[v._v("CSS Modules仍然使用CSS，只是让JS来管理依赖。它能够最大化地结合CSS生态和JS模块化能力，目前来看是最好的解决方案。Vue的scoped style也算是一种。")])]),v._v(" "),t("ul",[t("li",[v._v("资源的模块化")])]),v._v(" "),t("h2",{attrs:{id:"组件化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[v._v("#")]),v._v(" 组件化")]),v._v(" "),t("p",[v._v("从UI拆分下来的每个包含模板(HTML)+样式(CSS)+逻辑(JS)功能完备的结构单元，我们称之为组件")]),v._v(" "),t("blockquote",[t("p",[v._v("组件化≠模块化。模块化只是在文件层面上，对代码或资源的拆分；而组件化是在设计层面上，对UI（用户界面）的拆分。")])]),v._v(" "),t("h2",{attrs:{id:"规范化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#规范化"}},[v._v("#")]),v._v(" 规范化")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("目录结构的制定")]),v._v(" "),t("ul",[t("li",[v._v("文件夹，文件命名，位置")])])]),v._v(" "),t("li",[t("p",[v._v("编码规范")]),v._v(" "),t("ul",[t("li",[v._v("css，js，html编写规范（eslint，styleLint）")])])]),v._v(" "),t("li",[t("p",[v._v("前后端接口规范")]),v._v(" "),t("blockquote",[t("p",[v._v("接口规范主要初衷就是规范约定先行，尽量避免沟通联调产生的不必要的问题")])])]),v._v(" "),t("li",[t("p",[v._v("代码提交规范")]),v._v(" "),t("ul",[t("li",[v._v("git提交规范（angular规范）, codeView")])])]),v._v(" "),t("li",[t("p",[v._v("设计规范")])]),v._v(" "),t("li",[t("p",[v._v("文档规范")])]),v._v(" "),t("li",[t("p",[v._v("数据埋点")]),v._v(" "),t("ul",[t("li",[v._v("听云，matomo")])])]),v._v(" "),t("li",[t("p",[v._v("错误收集")]),v._v(" "),t("ul",[t("li",[v._v("sentry")])])])]),v._v(" "),t("h2",{attrs:{id:"自动化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动化"}},[v._v("#")]),v._v(" 自动化")]),v._v(" "),t("blockquote",[t("p",[v._v("任何简单机械的重复劳动都应该让机器去完成。")])]),v._v(" "),t("ul",[t("li",[v._v("自动化构建(docker)")]),v._v(" "),t("li",[v._v("自动化测试")]),v._v(" "),t("li",[v._v("自动化部署（gitlab cli）")])]),v._v(" "),t("p",[v._v("https://www.jianshu.com/p/88ed70476adb")])])}),[],!1,null,null,null);_.default=l.exports}}]);